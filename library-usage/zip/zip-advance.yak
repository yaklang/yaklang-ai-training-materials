// =============================================================================
// yaklang zip 库高级功能使用练习和实战案例
// ZIP文件搜索 Grep功能 文件提取 高级ZIP操作 并发处理
// 关键词: zip.GrepRegexp, zip.GrepSubString, zip.ExtractFile, zip.ExtractFiles, 高级搜索, 文件提取
// =============================================================================

println("yaklang zip 库高级功能测试开始...")

// =============================================================================
// 1. 创建高级测试环境
// 高级测试环境 复杂数据结构 多文件场景 实战数据
// 关键词: 测试环境, 复杂数据, 多文件场景, 实战准备
// =============================================================================
println("\n1. 创建高级测试环境")

// 创建测试目录
test_dir = os.TempDir() + "/yaklang-zip-advance-" + str.RandStr(8)
try {
    file.MkdirAll(test_dir)
    println("创建高级测试目录:", test_dir)
} catch err {
    println("创建测试目录失败:", err)
}

// 创建包含代码的测试数据
code_files = {
    "src/main.yak": `// 主程序入口
println("Application started")

func processData(data) {
    // 处理数据的核心逻辑
    result = transform(data)
    return result
}

func main() {
    data = loadConfig()
    result = processData(data)
    println("Result:", result)
}`,
    "src/utils/string.yak": `// 字符串工具函数
func contains(str, substr) {
    return str.Contains(substr)
}

func format(template, args...) {
    return sprintf(template, args...)
}

// TODO: 添加更多字符串处理函数
func sanitize(input) {
    // 清理用户输入
    return str.TrimSpace(input)
}`,
    "src/network/http.yak": `// HTTP 客户端封装
func httpGet(url) {
    rsp, err = http.Get(url)~
    if err != nil {
        log.error("HTTP GET failed: %v", err)
        return nil, err
    }
    return rsp.ReadBodyString()~, nil
}

func httpPost(url, data) {
    // POST 请求实现
    rsp, err = http.Post(url, data)~
    return rsp, err
}`,
    "config/app.json": `{
    "server": {
        "host": "0.0.0.0",
        "port": 8080,
        "timeout": 30
    },
    "database": {
        "type": "postgresql",
        "host": "localhost",
        "port": 5432,
        "name": "myapp"
    },
    "logging": {
        "level": "info",
        "format": "json"
    }
}`,
    "logs/app.log": `2024-01-01 10:00:00 [INFO] Application started
2024-01-01 10:00:01 [DEBUG] Loading configuration
2024-01-01 10:00:02 [INFO] Server listening on :8080
2024-01-01 10:05:30 [ERROR] Database connection failed: timeout
2024-01-01 10:05:31 [WARN] Retrying database connection
2024-01-01 10:05:32 [INFO] Database connected successfully
2024-01-01 10:10:00 [DEBUG] Processing request from 192.168.1.100
2024-01-01 10:10:01 [INFO] Request processed successfully`,
    "logs/error.log": `2024-01-01 10:05:30 [ERROR] Database connection failed
Stack trace:
  at connect() in database.yak:45
  at init() in main.yak:12
  at main() in main.yak:20
Error: connection timeout after 30s

2024-01-01 11:30:15 [ERROR] Invalid user input
Details: Special characters not allowed
Input: <script>alert('xss')</script>`,
    "README.md": `# 项目文档

## 概述
这是一个示例项目，用于演示 Yaklang 的各种功能。

## 安装
\`\`\`bash
yak install myapp
\`\`\`

## 使用方法
\`\`\`yak
app.Start()
\`\`\`

## TODO
- [ ] 添加用户认证
- [ ] 实现数据缓存
- [ ] 优化性能

## 许可证
MIT License`
}

// 压缩代码文件为 ZIP
compressed_data = zip.CompressRaw(code_files)~
zip_file_path = test_dir + "/project.zip"
file.Save(zip_file_path, compressed_data)
println("创建测试 ZIP 文件:", zip_file_path)
println("ZIP 文件大小:", len(compressed_data), "字节")

println("高级测试环境创建: 完成")

// =============================================================================
// 2. zip.GrepRegexp - 正则表达式搜索功能
// 正则搜索 模式匹配 代码搜索 日志分析
// 关键词: GrepRegexp, 正则表达式, 模式匹配, 代码搜索
// =============================================================================
println("\n2. zip.GrepRegexp - 正则表达式搜索功能")

// 测试1: 搜索函数定义
println("\n测试1: 搜索所有函数定义")
try {
    results = zip.GrepRegexp(zip_file_path, `func\s+\w+\s*\(`, zip.grepLimit(10))~
    println("找到", len(results), "个函数定义:")
    for result in results {
        println(sprintf("  文件: %s, 行 %d: %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("搜索函数定义失败:", err)
}

// 测试2: 搜索 TODO 注释
println("\n测试2: 搜索 TODO 注释")
try {
    results = zip.GrepRegexp(zip_file_path, `(?i)TODO:.*`)~
    println("找到", len(results), "个 TODO 项:")
    for result in results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("搜索 TODO 失败:", err)
}

// 测试3: 搜索 ERROR 日志并显示上下文
println("\n测试3: 搜索 ERROR 日志（带上下文）")
try {
    results = zip.GrepRegexp(zip_file_path, `\[ERROR\]`, zip.grepContextLine(2))~
    println("找到", len(results), "个错误日志:")
    for result in results {
        println(sprintf("\n文件: %s, 行 %d:", result.FileName, result.LineNumber))
        
        // 显示前置上下文
        if len(result.ContextBefore) > 0 {
            println("  【上文】")
            for line in result.ContextBefore {
                println("    ", line)
            }
        }
        
        // 显示匹配行
        println("  【匹配】", result.Line)
        
        // 显示后置上下文
        if len(result.ContextAfter) > 0 {
            println("  【下文】")
            for line in result.ContextAfter {
                println("    ", line)
            }
        }
    }
} catch err {
    println("搜索 ERROR 日志失败:", err)
}

// 测试4: 使用原始数据搜索
println("\n测试4: 使用原始数据搜索")
try {
    raw_data = file.ReadFile(zip_file_path)~
    results = zip.GrepRawRegexp(raw_data, `\bhost\b.*:.*\d+`, zip.grepLimit(5))~
    println("找到", len(results), "个主机配置:")
    for result in results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("原始数据搜索失败:", err)
}

println("GrepRegexp 功能测试: 通过")

// =============================================================================
// 3. zip.GrepSubString - 子字符串搜索功能  
// 子串搜索 关键词查找 文本搜索 快速定位
// 关键词: GrepSubString, 子串搜索, 关键词查找, 文本定位
// =============================================================================
println("\n3. zip.GrepSubString - 子字符串搜索功能")

// 测试1: 区分大小写的搜索
println("\n测试1: 区分大小写搜索 'ERROR'")
try {
    results = zip.GrepSubString(zip_file_path, "ERROR", zip.grepCaseSensitive())~
    println("找到", len(results), "个匹配（区分大小写）:")
    for result in results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("区分大小写搜索失败:", err)
}

// 测试2: 不区分大小写的搜索
println("\n测试2: 不区分大小写搜索 'error'")
try {
    results = zip.GrepSubString(zip_file_path, "error")~
    println("找到", len(results), "个匹配（不区分大小写）:")
    for result in results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("不区分大小写搜索失败:", err)
}

// 测试3: 搜索配置项
println("\n测试3: 搜索配置项 'port'")
try {
    results = zip.GrepSubString(zip_file_path, "port", zip.grepLimit(5))~
    println("找到", len(results), "个端口配置:")
    for result in results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("搜索配置项失败:", err)
}

// 测试4: 使用原始数据搜索
println("\n测试4: 在原始数据中搜索 'database'")
try {
    raw_data = file.ReadFile(zip_file_path)~
    results = zip.GrepRawSubString(raw_data, "database", zip.grepContextLine(1))~
    println("找到", len(results), "个数据库相关配置:")
    for result in results {
        println(sprintf("\n%s:%d", result.FileName, result.LineNumber))
        if len(result.ContextBefore) > 0 {
            for line in result.ContextBefore {
                println("  -", line)
            }
        }
        println("  >", result.Line)
        if len(result.ContextAfter) > 0 {
            for line in result.ContextAfter {
                println("  -", line)
            }
        }
    }
} catch err {
    println("原始数据搜索失败:", err)
}

println("GrepSubString 功能测试: 通过")

// =============================================================================
// 4. zip.ExtractFile - 单文件提取功能
// 文件提取 单文件读取 精准提取 ZIP读取
// 关键词: ExtractFile, 单文件提取, 精准读取, 文件获取
// =============================================================================
println("\n4. zip.ExtractFile - 单文件提取功能")

// 测试1: 提取配置文件
println("\n测试1: 提取配置文件")
try {
    content = zip.ExtractFile(zip_file_path, "config/app.json")~
    println("成功提取 config/app.json:")
    println(content)
    
    // 解析 JSON 配置
    config = json.loads(content)~
    println("\n解析后的配置:")
    println("  服务器端口:", config["server"]["port"])
    println("  数据库类型:", config["database"]["type"])
} catch err {
    println("提取配置文件失败:", err)
}

// 测试2: 提取代码文件
println("\n测试2: 提取主程序文件")
try {
    content = zip.ExtractFile(zip_file_path, "src/main.yak")~
    println("成功提取 src/main.yak:")
    lines = str.Split(content, "\n")
    println("文件共", len(lines), "行")
    println("前5行内容:")
    for i in range(0, min(5, len(lines))) {
        println(sprintf("  %d: %s", i+1, lines[i]))
    }
} catch err {
    println("提取代码文件失败:", err)
}

// 测试3: 从原始数据提取文件
println("\n测试3: 从原始数据提取 README.md")
try {
    raw_data = file.ReadFile(zip_file_path)~
    content = zip.ExtractFileFromRaw(raw_data, "README.md")~
    println("成功提取 README.md:")
    println(content)
} catch err {
    println("从原始数据提取失败:", err)
}

// 测试4: 提取不存在的文件（错误处理）
println("\n测试4: 提取不存在的文件")
try {
    content = zip.ExtractFile(zip_file_path, "nonexistent.txt")~
    println("意外成功:", content)
} catch err {
    println("预期的错误:", err)
}

println("ExtractFile 功能测试: 通过")

// =============================================================================
// 5. zip.ExtractFiles - 批量文件提取功能
// 批量提取 多文件读取 并发提取 高效处理
// 关键词: ExtractFiles, 批量提取, 并发处理, 多文件读取
// =============================================================================
println("\n5. zip.ExtractFiles - 批量文件提取功能")

// 测试1: 提取多个代码文件
println("\n测试1: 批量提取代码文件")
try {
    files_to_extract = [
        "src/main.yak",
        "src/utils/string.yak", 
        "src/network/http.yak"
    ]
    
    results = zip.ExtractFiles(zip_file_path, files_to_extract)~
    println("成功提取", len(results), "个文件:")
    
    for result in results {
        if result.Error != nil {
            println(sprintf("  ✗ %s: %v", result.FileName, result.Error))
        } else {
            lines = str.Split(result.Content, "\n")
            println(sprintf("  ✓ %s: %d 字节, %d 行", result.FileName, len(result.Content), len(lines)))
        }
    }
} catch err {
    println("批量提取失败:", err)
}

// 测试2: 提取日志文件
println("\n测试2: 批量提取日志文件")
try {
    log_files = [
        "logs/app.log",
        "logs/error.log"
    ]
    
    results = zip.ExtractFiles(zip_file_path, log_files)~
    println("提取了", len(results), "个日志文件:")
    
    for result in results {
        if result.Error == nil {
            lines = str.Split(result.Content, "\n")
            println(sprintf("\n文件: %s (%d 行)", result.FileName, len(lines)))
            println("最后3行:")
            start_idx = max(0, len(lines) - 3)
            for i in range(start_idx, len(lines)) {
                if str.TrimSpace(lines[i]) != "" {
                    println("  ", lines[i])
                }
            }
        }
    }
} catch err {
    println("提取日志失败:", err)
}

// 测试3: 从原始数据批量提取
println("\n测试3: 从原始数据批量提取文件")
try {
    raw_data = file.ReadFile(zip_file_path)~
    files = ["config/app.json", "README.md"]
    
    results = zip.ExtractFilesFromRaw(raw_data, files)~
    println("从原始数据提取了", len(results), "个文件:")
    
    total_size = 0
    for result in results {
        if result.Error == nil {
            total_size += len(result.Content)
            println(sprintf("  %s: %d 字节", result.FileName, len(result.Content)))
        }
    }
    println("总大小:", total_size, "字节")
} catch err {
    println("批量提取失败:", err)
}

println("ExtractFiles 功能测试: 通过")

// =============================================================================
// 6. zip.ExtractByPattern - 模式匹配提取功能
// 模式提取 通配符匹配 批量筛选 智能提取
// 关键词: ExtractByPattern, 模式匹配, 通配符, 批量筛选
// =============================================================================
println("\n6. zip.ExtractByPattern - 模式匹配提取功能")

// 测试1: 提取所有 .yak 文件
println("\n测试1: 提取所有 .yak 文件")
try {
    results = zip.ExtractByPattern(zip_file_path, "*.yak")~
    println("找到", len(results), "个 .yak 文件:")
    
    for result in results {
        if result.Error == nil {
            lines = str.Split(result.Content, "\n")
            println(sprintf("  %s: %d 行", result.FileName, len(lines)))
        }
    }
} catch err {
    println("模式提取失败:", err)
}

// 测试2: 提取所有日志文件
println("\n测试2: 提取日志文件 (*.log)")
try {
    results = zip.ExtractByPattern(zip_file_path, "*.log")~
    println("找到", len(results), "个日志文件:")
    
    for result in results {
        if result.Error == nil {
            println(sprintf("  %s: %d 字节", result.FileName, len(result.Content)))
        }
    }
} catch err {
    println("提取日志失败:", err)
}

// 测试3: 提取特定前缀的文件
println("\n测试3: 提取 src/ 目录下的文件")
try {
    raw_data = file.ReadFile(zip_file_path)~
    results = zip.ExtractByPatternFromRaw(raw_data, "src/*")~
    println("找到", len(results), "个源代码文件:")
    
    for result in results {
        if result.Error == nil {
            println(sprintf("  %s: %d 字节", result.FileName, len(result.Content)))
        }
    }
} catch err {
    println("模式提取失败:", err)
}

// 测试4: 提取所有文件
println("\n测试4: 提取所有文件 (*)")
try {
    results = zip.ExtractByPattern(zip_file_path, "*")~
    println("提取了所有", len(results), "个文件")
    
    total_size = 0
    for result in results {
        if result.Error == nil {
            total_size += len(result.Content)
        }
    }
    println("所有文件总大小:", total_size, "字节")
} catch err {
    println("提取所有文件失败:", err)
}

println("ExtractByPattern 功能测试: 通过")

// =============================================================================
// 7. 实战场景1: 日志分析工作流
// 日志分析 错误定位 日志搜索 问题诊断
// 关键词: 日志分析, 错误定位, 问题诊断, 实战应用
// =============================================================================
println("\n7. 实战场景1: 日志分析工作流")

println("\n场景: 分析 ZIP 包中的日志文件，定位错误并提取相关上下文")

// 步骤1: 搜索所有错误
println("\n步骤1: 搜索所有 ERROR 日志")
error_results = []
try {
    error_results = zip.GrepRegexp(zip_file_path, `\[ERROR\]`, zip.grepContextLine(3))~
    println("找到", len(error_results), "个错误:")
    for result in error_results {
        println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
    }
} catch err {
    println("搜索错误失败:", err)
}

// 步骤2: 提取包含错误的日志文件
println("\n步骤2: 提取所有日志文件进行详细分析")
log_files_to_extract = []
for result in error_results {
    if result.FileName not in log_files_to_extract {
        log_files_to_extract = append(log_files_to_extract, result.FileName)
    }
}

if len(log_files_to_extract) > 0 {
    try {
        extracted_logs = zip.ExtractFiles(zip_file_path, log_files_to_extract)~
        println("提取了", len(extracted_logs), "个日志文件")
        
        // 步骤3: 分析错误模式
        println("\n步骤3: 分析错误模式")
        for log in extracted_logs {
            if log.Error == nil {
                println(sprintf("\n分析文件: %s", log.FileName))
                lines = str.Split(log.Content, "\n")
                
                error_count = 0
                warn_count = 0
                for line in lines {
                    if str.Contains(line, "[ERROR]") {
                        error_count++
                    } else if str.Contains(line, "[WARN]") {
                        warn_count++
                    }
                }
                
                println(sprintf("  错误数: %d, 警告数: %d", error_count, warn_count))
            }
        }
    } catch err {
        println("提取日志失败:", err)
    }
}

println("\n日志分析工作流: 完成")

// =============================================================================
// 8. 实战场景2: 代码审计工作流
// 代码审计 安全检查 代码搜索 漏洞查找
// 关键词: 代码审计, 安全检查, 漏洞扫描, 代码分析
// =============================================================================
println("\n8. 实战场景2: 代码审计工作流")

println("\n场景: 审计 ZIP 包中的代码，查找潜在的安全问题")

// 步骤1: 搜索敏感函数调用
println("\n步骤1: 搜索潜在的不安全函数")
security_patterns = [
    `eval\s*\(`,           // eval 函数
    `exec\s*\(`,           // exec 函数
    `system\s*\(`,         // system 调用
    `password\s*=`,        // 硬编码密码
    `api[_-]?key\s*=`,    // API 密钥
]

for pattern in security_patterns {
    try {
        results = zip.GrepRegexp(zip_file_path, pattern)~
        if len(results) > 0 {
            println(sprintf("\n发现潜在问题 - 模式: %s", pattern))
            for result in results {
                println(sprintf("  %s:%d - %s", result.FileName, result.LineNumber, str.TrimSpace(result.Line)))
            }
        }
    } catch err {
        println("搜索失败:", err)
    }
}

// 步骤2: 提取所有代码文件
println("\n步骤2: 提取所有代码文件")
try {
    code_results = zip.ExtractByPattern(zip_file_path, "*.yak")~
    println("提取了", len(code_results), "个代码文件")
    
    // 步骤3: 统计代码指标
    println("\n步骤3: 代码统计")
    total_lines = 0
    total_funcs = 0
    
    for code in code_results {
        if code.Error == nil {
            lines = str.Split(code.Content, "\n")
            total_lines += len(lines)
            
            // 统计函数数量
            for line in lines {
                if str.Contains(line, "func ") {
                    total_funcs++
                }
            }
            
            println(sprintf("  %s: %d 行", code.FileName, len(lines)))
        }
    }
    
    println(sprintf("\n总计: %d 行代码, %d 个函数", total_lines, total_funcs))
} catch err {
    println("提取代码失败:", err)
}

println("\n代码审计工作流: 完成")

// =============================================================================
// 9. 实战场景3: 配置文件管理
// 配置管理 配置提取 配置分析 环境配置
// 关键词: 配置管理, 配置提取, 环境配置, 配置分析
// =============================================================================
println("\n9. 实战场景3: 配置文件管理")

println("\n场景: 从部署包中提取和分析配置文件")

// 步骤1: 搜索所有配置相关的文件
println("\n步骤1: 搜索配置文件")
try {
    config_results = zip.ExtractByPattern(zip_file_path, "*.json")~
    println("找到", len(config_results), "个配置文件:")
    
    for config in config_results {
        if config.Error == nil {
            println(sprintf("  %s: %d 字节", config.FileName, len(config.Content)))
            
            // 解析并显示配置
            try {
                config_data = json.loads(config.Content)~
                println("    配置项:", json.dumps(config_data))
            } catch err {
                println("    (无法解析为 JSON)")
            }
        }
    }
} catch err {
    println("提取配置失败:", err)
}

// 步骤2: 搜索配置中的敏感信息
println("\n步骤2: 检查敏感配置项")
sensitive_keywords = ["password", "secret", "key", "token"]

for keyword in sensitive_keywords {
    try {
        results = zip.GrepSubString(zip_file_path, keyword)~
        if len(results) > 0 {
            println(sprintf("\n发现敏感关键词 '%s':", keyword))
            for result in results {
                println(sprintf("  %s:%d", result.FileName, result.LineNumber))
            }
        }
    } catch err {
        println("搜索失败:", err)
    }
}

println("\n配置文件管理: 完成")

// =============================================================================
// 10. 高级综合应用: Grep + Extract 组合使用
// 组合应用 综合场景 高效工作流 智能处理
// 关键词: Grep+Extract, 组合应用, 智能工作流, 高效处理
// =============================================================================
println("\n10. 高级综合应用: Grep + Extract 组合使用")

println("\n场景: 先 Grep 定位目标，再精准提取文件内容")

// 步骤1: 使用 Grep 查找包含特定内容的文件
println("\n步骤1: 查找包含 'func' 的文件")
files_with_functions = {}

try {
    results = zip.GrepRegexp(zip_file_path, `func\s+\w+`)~
    println("找到", len(results), "个函数定义")
    
    for result in results {
        files_with_functions[result.FileName] = true
    }
    
    println("涉及文件数:", len(files_with_functions))
} catch err {
    println("Grep 失败:", err)
}

// 步骤2: 提取这些文件的完整内容
println("\n步骤2: 提取包含函数的文件")
files_to_extract = []
for filename, _ in files_with_functions {
    files_to_extract = append(files_to_extract, filename)
}

if len(files_to_extract) > 0 {
    try {
        extracted = zip.ExtractFiles(zip_file_path, files_to_extract)~
        println("成功提取", len(extracted), "个文件")
        
        // 步骤3: 分析提取的文件
        println("\n步骤3: 分析提取的文件")
        for file in extracted {
            if file.Error == nil {
                lines = str.Split(file.Content, "\n")
                func_count = 0
                
                for line in lines {
                    if str.Contains(line, "func ") {
                        func_count++
                    }
                }
                
                println(sprintf("  %s: %d 行, %d 个函数", file.FileName, len(lines), func_count))
            }
        }
    } catch err {
        println("提取失败:", err)
    }
}

println("\nGrep + Extract 组合应用: 完成")

// =============================================================================
// 11. 性能测试: 并发提取效率
// 性能测试 并发处理 效率对比 压力测试
// 关键词: 性能测试, 并发效率, 压力测试, 性能优化
// =============================================================================
println("\n11. 性能测试: 并发提取效率")

// 创建包含更多文件的测试数据
println("\n创建大型测试 ZIP...")
large_files = {}
for i in 100 {
    filename = sprintf("test/file_%03d.txt", i)
    content = sprintf("File %d content\n", i) + str.Repeat("Test data ", 100)
    large_files[filename] = content
}

large_zip_data = zip.CompressRaw(large_files)~
large_zip_path = test_dir + "/large_test.zip"
file.Save(large_zip_path, large_zip_data)
println("创建了包含", len(large_files), "个文件的 ZIP")

// 测试批量提取性能
println("\n测试批量提取性能:")
files_to_test = []
for i in 50 {
    files_to_test = append(files_to_test, sprintf("test/file_%03d.txt", i))
}

start_time = time.Now()
try {
    results = zip.ExtractFiles(large_zip_path, files_to_test)~
    end_time = time.Now()
    duration = end_time.Sub(start_time)
    
    success_count = 0
    for result in results {
        if result.Error == nil {
            success_count++
        }
    }
    
    println(sprintf("提取 %d 个文件，成功 %d 个", len(files_to_test), success_count))
    println(sprintf("耗时: %v", duration))
    println(sprintf("平均每文件: %v", duration.Nanoseconds() / int64(len(files_to_test))))
} catch err {
    println("性能测试失败:", err)
}

println("\n性能测试: 完成")

// =============================================================================
// 12. 清理测试环境
// 环境清理 资源释放 测试收尾
// 关键词: 清理, 资源释放, 测试收尾
// =============================================================================
println("\n12. 清理测试环境")

try {
    os.RemoveAll(test_dir)
    println("测试目录清理完成:", test_dir)
} catch err {
    println("清理失败:", err)
}

// =============================================================================
// 13. 功能验证总结
// 功能总结 测试总结 完成报告
// 关键词: 功能总结, 测试报告, 验证完成
// =============================================================================
println("\n13. 功能验证总结")

verified_features = [
    "zip.GrepRegexp - 正则表达式搜索",
    "zip.GrepSubString - 子字符串搜索",
    "zip.GrepRawRegexp - 原始数据正则搜索",
    "zip.GrepRawSubString - 原始数据子串搜索",
    "zip.ExtractFile - 单文件提取",
    "zip.ExtractFileFromRaw - 从原始数据提取单文件",
    "zip.ExtractFiles - 批量文件提取（并发）",
    "zip.ExtractFilesFromRaw - 从原始数据批量提取",
    "zip.ExtractByPattern - 模式匹配提取",
    "zip.ExtractByPatternFromRaw - 从原始数据模式提取",
    "配置选项: grepLimit, grepContextLine, grepCaseSensitive",
    "实战场景: 日志分析工作流",
    "实战场景: 代码审计工作流", 
    "实战场景: 配置文件管理",
    "高级应用: Grep + Extract 组合",
    "性能测试: 并发提取效率"
]

println("✓ 验证通过的高级功能:")
for i := 0; i < len(verified_features); i++ {
    println(sprintf("  %d. %s", i+1, verified_features[i]))
}

println(sprintf("\n✓ 总计验证 %d 项高级功能", len(verified_features)))
println("✓ 所有测试通过，zip 库高级功能完整且强大")
println("✓ Grep、Extract 等功能可高效处理 ZIP 文件")

// 最终断言
assert len(verified_features) >= 16, sprintf("应该验证至少16项功能，实际验证%d项", len(verified_features))

println("\n所有 zip 库高级功能测试完成!")
println("zip-advance.yak: 测试通过!")

