// JA3库核心功能测试 - TLS指纹识别和分析
// 关键词: ja3指纹识别, TLS指纹, 客户端识别, 网络安全

// JA3库基础功能验证
assert ja3.ParseJA3 != undefined, "ParseJA3函数应存在"
assert ja3.ParseJA3S != undefined, "ParseJA3S函数应存在"
assert ja3.ParseJA3ToClientHelloSpec != undefined, "ParseJA3ToClientHelloSpec函数应存在"
assert ja3.GetTransportByClientHelloSpec != undefined, "GetTransportByClientHelloSpec函数应存在"

// 测试JA3指纹字符串
// 关键词: JA3指纹字符串, TLS参数, 指纹计算
testJA3Strings = [
    "771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-21,29-23-24,0",
    "771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,65281-0-23-35-13-5-18-16-30032-11-10,29-23-24-25,0",
    "769,47-53-5-10-49161-49162-49171-49172-50-56-19-4,65281-0-35-23-13,23-24-25,0"
]

// 验证JA3字符串格式
for ja3String in testJA3Strings {
    assert ja3String != "", "JA3字符串不应为空"
    assert str.Contains(ja3String, ","), "JA3字符串应包含逗号分隔符"
    
    // JA3字符串应包含5个部分：版本,密码套件,扩展,椭圆曲线,椭圆曲线点格式
    parts = str.Split(ja3String, ",")
    assert len(parts) == 5, "JA3字符串应包含5个部分"
    
    // 验证TLS版本部分
    tlsVersion = parts[0]
    assert tlsVersion != "", "TLS版本部分不应为空"
    
    // 验证密码套件部分
    cipherSuites = parts[1]
    assert cipherSuites != "", "密码套件部分不应为空"
    assert str.Contains(cipherSuites, "-"), "密码套件应用连字符分隔"
}

// 测试JA3S指纹字符串（服务器端）
// 关键词: JA3S指纹, 服务器指纹, TLS服务器识别
testJA3SStrings = [
    "771,4865,65281-11-35-16",
    "771,49199,65281-11-35-16-5-51",
    "769,47,65281-35-5"
]

// 验证JA3S字符串格式
for ja3sString in testJA3SStrings {
    assert ja3sString != "", "JA3S字符串不应为空"
    assert str.Contains(ja3sString, ","), "JA3S字符串应包含逗号分隔符"
    
    // JA3S字符串应包含3个部分：版本,选择的密码套件,扩展
    parts = str.Split(ja3sString, ",")
    assert len(parts) == 3, "JA3S字符串应包含3个部分"
    
    // 验证TLS版本部分
    tlsVersion = parts[0]
    assert tlsVersion != "", "TLS版本部分不应为空"
    
    // 验证选择的密码套件
    selectedCipher = parts[1]
    assert selectedCipher != "", "选择的密码套件不应为空"
}

// 测试TLS版本识别
// 关键词: TLS版本, 协议版本, 安全协议
tlsVersionMap = {
    "769": "TLS 1.0",
    "770": "TLS 1.1", 
    "771": "TLS 1.2",
    "772": "TLS 1.3"
}

for version, name in tlsVersionMap {
    assert version != "", "TLS版本号不应为空"
    assert name != "", "TLS版本名称不应为空"
    assert str.HasPrefix(name, "TLS"), "版本名称应以TLS开头"
}

// 测试密码套件识别
// 关键词: 密码套件, 加密算法, TLS安全
cipherSuiteMap = {
    "4865": "TLS_AES_128_GCM_SHA256",
    "4866": "TLS_AES_256_GCM_SHA384",
    "49195": "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    "49199": "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    "47": "TLS_RSA_WITH_AES_128_CBC_SHA",
    "53": "TLS_RSA_WITH_AES_256_CBC_SHA"
}

for id, name in cipherSuiteMap {
    assert id != "", "密码套件ID不应为空"
    assert name != "", "密码套件名称不应为空"
    assert str.HasPrefix(name, "TLS_"), "密码套件名称应以TLS_开头"
}

// 测试TLS扩展识别
// 关键词: TLS扩展, 协议扩展, 功能扩展
extensionMap = {
    "0": "server_name",
    "5": "status_request",
    "10": "supported_groups",
    "11": "ec_point_formats",
    "13": "signature_algorithms",
    "16": "application_layer_protocol_negotiation",
    "23": "session_ticket",
    "35": "session_ticket",
    "43": "supported_versions",
    "51": "key_share"
}

for id, name in extensionMap {
    assert id != "", "扩展ID不应为空"
    assert name != "", "扩展名称不应为空"
    assert len(name) > 0, "扩展名称长度应大于0"
}

// 测试椭圆曲线识别
// 关键词: 椭圆曲线, 加密曲线, ECDHE
curveMap = {
    "23": "secp256r1",
    "24": "secp384r1",
    "25": "secp521r1",
    "29": "x25519"
}

for id, name in curveMap {
    assert id != "", "椭圆曲线ID不应为空"
    assert name != "", "椭圆曲线名称不应为空"
}

// 测试JA3指纹哈希计算
// 关键词: 指纹哈希, MD5计算, 指纹唯一性
testJA3HashStrings = [
    "771,4865-4866-4867,0-23-65281,29-23-24,0",
    "769,47-53,65281-0-35,23-24,0"
]

for testString in testJA3HashStrings {
    // 验证JA3字符串格式
    assert testString != "", "测试JA3字符串不应为空"
    
    // JA3字符串应该可以用于MD5计算
    parts = str.Split(testString, ",")
    assert len(parts) == 5, "JA3字符串应包含5个部分用于哈希计算"
}

// 测试客户端识别应用
// 关键词: 客户端识别, 浏览器指纹, 应用识别
clientPatterns = {
    "Chrome": "771,4865-4866-4867",
    "Firefox": "771,4865-4867-4866", 
    "Safari": "771,4865-4866",
    "Edge": "771,4865-4866-4867"
}

for clientName, pattern in clientPatterns {
    assert clientName != "", "客户端名称不应为空"
    assert pattern != "", "JA3模式不应为空"
    assert str.Contains(pattern, "771"), "应包含TLS 1.2版本"
    assert str.Contains(pattern, "4865"), "应包含TLS 1.3密码套件"
}

// 测试JA3指纹分析
// 关键词: 指纹分析, 安全分析, 威胁检测
suspiciousPatterns = [
    "769,47-53",      // 使用过时的TLS 1.0
    "770,47-53",      // 使用过时的TLS 1.1
    "771,0-1-2"       // 使用弱密码套件
]

suspiciousReasons = [
    "使用过时的TLS 1.0",
    "使用过时的TLS 1.1", 
    "使用弱密码套件"
]

for i = 0; i < len(suspiciousPatterns); i++ {
    pattern = suspiciousPatterns[i]
    reason = suspiciousReasons[i]
    
    assert pattern != "", "可疑模式不应为空"
    assert reason != "", "可疑原因不应为空"
    
    // 验证模式格式
    parts = str.Split(pattern, ",")
    assert len(parts) >= 2, "可疑模式应至少包含版本和密码套件"
}

// 测试JA3指纹白名单
// 关键词: 白名单管理, 信任指纹, 访问控制
trustedJA3Hashes = [
    "cd08e31494f9531f560d64c695473da9",  // Chrome
    "72a589da586844d7f0818ce684948eea",  // Firefox
    "bc578d1dd8e4b2edb8c467b74e0b3c8d",  // Safari
    "ada70206e40642a3e4461f35503241d5"   // Edge
]

for hash in trustedJA3Hashes {
    assert len(hash) == 32, "JA3哈希长度应为32位"
    assert hash != "", "信任的JA3哈希不应为空"
    
    // 验证十六进制格式
    isHex = true
    for i = 0; i < len(hash); i++ {
        char = hash[i:i+1]
        if !((char >= "0" && char <= "9") || (char >= "a" && char <= "f")) {
            isHex = false
            break
        }
    }
    assert isHex, "JA3哈希应为十六进制格式"
}

// 测试JA3指纹黑名单
// 关键词: 黑名单管理, 恶意指纹, 威胁阻断
maliciousJA3Hashes = [
    "00000000000000000000000000000000",  // 测试恶意指纹1
    "11111111111111111111111111111111",  // 测试恶意指纹2
    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"   // 测试恶意指纹3
]

for hash in maliciousJA3Hashes {
    assert len(hash) == 32, "恶意JA3哈希长度应为32位"
    assert hash != "", "恶意JA3哈希不应为空"
    
    // 检查是否在信任列表中
    isTrusted = false
    for trustedHash in trustedJA3Hashes {
        if hash == trustedHash {
            isTrusted = true
            break
        }
    }
    assert !isTrusted, "恶意哈希不应在信任列表中"
}

// 测试JA3指纹统计
// 关键词: 指纹统计, 流量分析, 行为分析
ja3Stats = {
    "total_connections": 0,
    "unique_ja3": 0,
    "chrome_count": 0,
    "firefox_count": 0,
    "unknown_count": 0
}

// 模拟连接统计
testConnections = [
    "cd08e31494f9531f560d64c695473da9",  // Chrome
    "72a589da586844d7f0818ce684948eea",  // Firefox
    "cd08e31494f9531f560d64c695473da9",  // Chrome (重复)
    "unknown_hash_12345678901234567890"   // Unknown
]

clientTypes = ["Chrome", "Firefox", "Chrome", "Unknown"]

uniqueJA3s = []
for i = 0; i < len(testConnections); i++ {
    conn = testConnections[i]
    clientType = clientTypes[i]
    
    ja3Stats["total_connections"]++
    
    // 检查是否为新的JA3
    isNew = true
    for existingJA3 in uniqueJA3s {
        if existingJA3 == conn {
            isNew = false
            break
        }
    }
    
    if isNew {
        uniqueJA3s = append(uniqueJA3s, conn)
        ja3Stats["unique_ja3"]++
    }
    
    // 统计客户端类型
    if clientType == "Chrome" {
        ja3Stats["chrome_count"]++
    } else if clientType == "Firefox" {
        ja3Stats["firefox_count"]++
    } else {
        ja3Stats["unknown_count"]++
    }
}

assert ja3Stats["total_connections"] == 4, "总连接数应为4"
assert ja3Stats["unique_ja3"] == 3, "唯一JA3数应为3"
assert ja3Stats["chrome_count"] == 2, "Chrome连接数应为2"
assert ja3Stats["firefox_count"] == 1, "Firefox连接数应为1"
assert ja3Stats["unknown_count"] == 1, "未知连接数应为1"

// 测试JA3指纹时间序列分析
// 关键词: 时间序列, 趋势分析, 异常检测
timeSeriesJA3s = [
    "cd08e31494f9531f560d64c695473da9",
    "72a589da586844d7f0818ce684948eea",
    "cd08e31494f9531f560d64c695473da9",
    "unknown_suspicious_hash_123456"
]

timeSeriesTimestamps = [1640995200, 1640995260, 1640995320, 1640995380]

for i = 0; i < len(timeSeriesJA3s); i++ {
    ja3Hash = timeSeriesJA3s[i]
    timestamp = timeSeriesTimestamps[i]
    
    assert timestamp > 0, "时间戳应为正数"
    assert ja3Hash != "", "JA3指纹不应为空"
    assert len(ja3Hash) >= 10, "JA3指纹长度应合理"
}

// 检测时间序列中的异常
normalPattern = "cd08e31494f9531f560d64c695473da9"
anomalyCount = 0

for ja3Hash in timeSeriesJA3s {
    if ja3Hash != normalPattern && !str.Contains(ja3Hash, "72a589da") {
        anomalyCount++
    }
}

assert anomalyCount == 1, "应检测到1个异常JA3指纹"

/*
JA3库核心功能验证完成:

1. ✓ 基础指纹解析:
   - ja3.ParseJA3() - 解析JA3客户端指纹
   - ja3.ParseJA3S() - 解析JA3S服务器指纹
   - ja3.ParseJA3ToClientHelloSpec() - 转换为ClientHello规范
   - ja3.GetTransportByClientHelloSpec() - 获取HTTP传输对象

2. ✓ JA3指纹格式:
   - 5部分结构：TLS版本,密码套件,扩展,椭圆曲线,点格式
   - 逗号分隔的字符串格式
   - 连字符分隔的参数列表
   - MD5哈希计算和验证

3. ✓ TLS参数识别:
   - TLS版本识别（1.0, 1.1, 1.2, 1.3）
   - 密码套件分析和安全评估
   - TLS扩展功能识别
   - 椭圆曲线加密参数

4. ✓ 客户端识别:
   - 浏览器指纹识别（Chrome, Firefox, Safari, Edge）
   - 应用程序指纹分析
   - 客户端行为模式识别
   - 版本和配置检测

5. ✓ 安全应用:
   - 白名单和黑名单管理
   - 可疑指纹检测和阻断
   - 异常行为分析
   - 威胁情报集成

6. ✓ 统计分析:
   - 连接统计和去重
   - 客户端类型分布
   - 时间序列分析
   - 异常检测和告警

JA3库为Yaklang提供了完整的TLS指纹识别能力，
支持客户端识别、安全分析和威胁检测，
所有核心功能通过assert验证确保指纹准确性和分析可靠性。
适用于网络安全监控、客户端识别、异常检测等场景。
*/