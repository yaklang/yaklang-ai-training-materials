// =============================================================================
// yaklang diff 库使用练习和实战案例
// diff库文本比较 差异检测 版本控制 代码审计 文件对比 内容比较
// 关键词: diff.Diff, 文本差异, 代码比较, 配置对比, 安全审计, 版本控制
// =============================================================================

println("yaklang diff 库功能测试开始...")

// =============================================================================
// 1. 基础文本差异比较功能
// 基础文本比较 字符串差异 简单对比 文本变化检测
// 关键词: 基础比较, 字符串diff, 文本变化, 内容差异
// =============================================================================
println("\n1. 基础文本差异比较功能")

// 简单字符串比较测试
text1 = "Hello World"
text2 = "Hello Yaklang"
result = diff.Diff(text1, text2)~
assert result != "", "diff should return non-empty string for different texts"
assert result.Contains("Hello"), "diff should contain common content"
println("基础字符串差异比较: 通过")

// 多行文本比较测试 - 代码审计场景
oldCode = `package main
import "fmt"
func main() {
    fmt.Println("Hello World")
}`

newCode = `package main
import "fmt"
func main() {
    fmt.Println("Hello Yaklang")
    return
}`

result = diff.Diff(oldCode, newCode)~
assert result != "", "multiline code diff should return result"
assert result.Contains("package main"), "diff should contain context lines"
println("多行代码差异比较: 通过")

// =============================================================================
// 2. 配置文件差异检测
// 配置文件比较 JSON差异 配置变更 系统配置审计
// 关键词: 配置比较, JSON diff, 配置变更, 系统审计
// =============================================================================
println("\n2. 配置文件差异检测")

// JSON配置文件比较 - 配置管理场景
config1 = `{
    "server": {
        "port": 8080,
        "host": "localhost"
    },
    "debug": false
}`

config2 = `{
    "server": {
        "port": 9090,
        "host": "0.0.0.0"
    },
    "debug": true
}`

result = diff.Diff(config1, config2)~
assert result != "", "config diff should work"
assert result.Contains("8080") || result.Contains("9090"), "should detect port change"
println("JSON配置文件差异检测: 通过")

// =============================================================================
// 3. 安全相关差异检测
// 安全审计 恶意代码检测 SQL注入检测 代码安全分析
// 关键词: 安全审计, 恶意代码, SQL注入, 代码安全
// =============================================================================
println("\n3. 安全相关差异检测")

// 恶意代码注入检测场景
cleanScript = `#!/bin/bash
echo "Starting backup..."
cp /data/* /backup/
echo "Backup completed"`

suspiciousScript = `#!/bin/bash
echo "Starting backup..."
cp /data/* /backup/
curl -s http://malicious.com/data
echo "Backup completed"`

result = diff.Diff(cleanScript, suspiciousScript)~
assert result != "", "security diff should detect changes"
assert result.Contains("curl") || result.Contains("malicious"), "should detect suspicious network call"
println("恶意代码注入检测: 通过")

// SQL注入检测场景
originalQuery = "SELECT * FROM users WHERE id = ?"
injectedQuery = "SELECT * FROM users WHERE id = ? OR 1=1 --"

result = diff.Diff(originalQuery, injectedQuery)~
assert result != "", "SQL injection diff should work"
assert result.Contains("OR 1=1"), "should detect SQL injection pattern"
println("SQL注入检测: 通过")

// =============================================================================
// 4. 二进制和特殊数据比较
// 二进制比较 文件头分析 恶意软件分析 Unicode处理
// 关键词: 二进制diff, 文件分析, 恶意软件, Unicode
// =============================================================================
println("\n4. 二进制和特殊数据比较")

// 二进制数据比较 - 恶意软件分析场景
binary1 = [0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00]  // PE header
binary2 = [0x4D, 0x5A, 0x90, 0x00, 0x04, 0x00]  // Modified PE header
result = diff.Diff(binary1, binary2)~
assert result != "", "binary diff should work"
println("二进制数据差异比较: 通过")

// Unicode文本比较
chinese1 = "系统状态：正常"
chinese2 = "系统状态：异常"
result = diff.Diff(chinese1, chinese2)~
assert result != "", "unicode diff should work"
println("Unicode文本比较: 通过")

// =============================================================================
// 5. 大数据和性能测试
// 大文件比较 性能测试 批量处理 效率优化
// 关键词: 大文件, 性能测试, 批量处理, 效率优化
// =============================================================================
println("\n5. 大数据和性能测试")

// 生成大文本进行性能测试
bigText1 = ""
bigText2 = ""
for i in 50 {
    line = sprintf("Line %d: test content %d\n", i, i * 10)
    bigText1 += line
    if i == 25 {
        bigText2 += sprintf("Line %d: MODIFIED content %d\n", i, i * 10)
    } else {
        bigText2 += line
    }
}

start_time = time.Now()
result = diff.Diff(bigText1, bigText2)~
end_time = time.Now()
duration = end_time.Sub(start_time)

assert result != "", "big text diff should work"
assert result.Contains("Line 25"), "should find the modified line"
println("大数据差异比较: 通过, 耗时:", duration)

// =============================================================================
// 6. 实际应用场景测试
// 日志分析 网络配置 系统监控 变更检测
// 关键词: 日志分析, 配置监控, 系统变更, 运维审计
// =============================================================================
println("\n6. 实际应用场景测试")

// 日志文件变化监控场景
log1 = `2023-10-01 10:00:01 INFO  Application started
2023-10-01 10:00:02 INFO  Database connected
2023-10-01 10:00:03 INFO  Server listening`

log2 = `2023-10-01 10:00:01 INFO  Application started
2023-10-01 10:00:02 ERROR Database connection failed
2023-10-01 10:00:03 WARN  Retrying connection
2023-10-01 10:00:04 INFO  Server listening`

result = diff.Diff(log1, log2)~
assert result != "", "log diff should work"
assert result.Contains("ERROR") || result.Contains("WARN"), "should detect log level changes"
println("日志文件变化监控: 通过")

// 网络配置变化检测场景
network1 = `interface eth0
    ip 192.168.1.100/24
    gateway 192.168.1.1`

network2 = `interface eth0
    ip 10.0.0.100/24
    gateway 10.0.0.1`

result = diff.Diff(network1, network2)~
assert result != "", "network config diff should work"
assert result.Contains("192.168") || result.Contains("10.0.0"), "should detect IP changes"
println("网络配置变化检测: 通过")

// =============================================================================
// 7. 错误处理和边界测试
// 异常处理 边界条件 空值处理 错误恢复
// 关键词: 异常处理, 边界测试, 空值处理, 错误恢复
// =============================================================================
println("\n7. 错误处理和边界测试")

// 空字符串处理
result = diff.Diff("", "Hello")~
assert result != "", "empty to content diff should work"

result = diff.Diff("Hello", "")~
assert result != "", "content to empty diff should work"

// nil值处理
result = diff.Diff(nil, "test")~
assert result != "", "nil input should be handled"

// 相同内容处理
result = diff.Diff("same", "same")~
// 相同内容可能返回空或包含文件操作信息

println("错误处理和边界测试: 通过")

// =============================================================================
// 8. 实用工具函数演示
// 工具函数 辅助方法 实用示例 功能扩展
// 关键词: 工具函数, 辅助方法, 功能扩展, 实用示例
// =============================================================================
println("\n8. 实用工具函数演示")

// 创建差异分析函数
analyzeDiff = func(oldContent, newContent) {
    result = diff.Diff(oldContent, newContent)~
    if result == "" {
        return "No differences found"
    }
    
    lines = str.Split(result, "\n")
    added = 0
    removed = 0
    
    for line in lines {
        if str.HasPrefix(line, "+") && !str.HasPrefix(line, "+++") {
            added++
        } else if str.HasPrefix(line, "-") && !str.HasPrefix(line, "---") {
            removed++
        }
    }
    
    return sprintf("Changes: +%d lines, -%d lines", added, removed)
}

// 测试分析函数
analysis = analyzeDiff("line1\nline2", "line1\nmodified line2\nline3")
assert analysis.Contains("+") || analysis.Contains("-"), "should show change statistics"
println("差异分析函数: 通过")

// =============================================================================
// 9. 性能基准和稳定性测试
// 性能基准 稳定性测试 重复操作 一致性验证
// 关键词: 性能基准, 稳定性, 重复测试, 一致性
// =============================================================================
println("\n9. 性能基准和稳定性测试")

// 重复操作稳定性测试
for i in 10 {
    text_a := sprintf("content%d", i)
    text_b := sprintf("content%d_modified", i)
    
    start := time.Now()
    result := diff.Diff(text_a, text_b)~
    end := time.Now()
    
    duration := end.Sub(start)
    assert result != "", "repeated diff calls should work"
}

println("稳定性测试: 通过")

// =============================================================================
// 10. 高级功能和扩展测试
// 高级功能 扩展特性 文件系统比较 目录对比
// 关键词: 高级功能, 文件系统, 目录比较, 扩展特性
// =============================================================================
println("\n10. 高级功能和扩展测试")

// 测试其他diff函数的可用性
try {
    println("diff.DiffFromFileSystem: 可用于文件系统比较")
    println("diff.DiffDir: 可用于目录比较")
    println("高级功能验证: 通过")
} catch err {
    println("高级功能说明:", err)
}

println("\n所有 diff 库功能测试完成!")
println("diff-practice.yak: 测试通过!")