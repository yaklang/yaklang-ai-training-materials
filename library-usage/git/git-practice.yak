// =============================================================================
// yaklang git 库使用练习和实战案例
// git库版本控制 仓库操作 GitHack 源码泄露 分支管理 提交历史
// 关键词: git.Clone, git.GitHack, git.HeadHash, git.Branch, 版本控制, 仓库管理
// =============================================================================

println("yaklang git 库功能测试开始...")

// =============================================================================
// 1. Git 仓库信息获取
// 仓库信息 分支查询 提交哈希 HEAD信息 仓库状态
// 关键词: HeadHash, HeadBranch, Branch, 仓库信息, 分支管理
// =============================================================================
println("\n1. Git 仓库信息获取")

// 测试当前仓库的基本信息
try {
    headHash = git.HeadHash(".")~
    if headHash != "" {
        println("当前 HEAD 哈希:", headHash)
        assert len(headHash) >= 7, "HEAD hash should be at least 7 characters"
    } else {
        println("当前目录不是 Git 仓库")
    }
} catch err {
    println("HeadHash 测试:", err)
}

// 获取当前分支信息
try {
    headBranch = git.HeadBranch(".")~
    if headBranch != "" {
        println("当前分支:", headBranch)
        assert headBranch != "", "Branch name should not be empty"
    } else {
        println("不在 Git 仓库或分离 HEAD 状态")
    }
} catch err {
    println("HeadBranch 测试:", err)
}

// 获取所有分支列表
try {
    branches = git.Branch(".")~
    if len(branches) > 0 {
        println("发现分支数量:", len(branches))
        branch_count = 0
        for branch in branches {
            if branch_count < 3 {  // 只显示前3个分支
                println("  分支:", branch)
                branch_count++
            }
        }
        assert len(branches) > 0, "Should have at least one branch"
    } else {
        println("未找到分支")
    }
} catch err {
    println("Branch 测试:", err)
}

println("Git 仓库信息获取: 通过")

// =============================================================================
// 2. Git 仓库快速概览
// 仓库概览 统计信息 快速分析 仓库摘要
// 关键词: Glance, 仓库概览, 统计信息, 快速分析
// =============================================================================
println("\n2. Git 仓库快速概览")

try {
    glanceInfo = git.Glance(".")~
    if glanceInfo != nil {
        println("仓库概览信息获取: 成功")
    } else {
        println("Glance 返回 nil")
    }
} catch err {
    println("Glance 测试:", err)
}

println("Git 仓库概览: 通过")

// =============================================================================
// 3. Git 克隆操作测试
// 仓库克隆 远程下载 代码获取 仓库复制
// 关键词: Clone, 仓库克隆, 远程仓库, 代码下载
// =============================================================================
println("\n3. Git 克隆操作测试")

tempDir = os.TempDir() + "/yaklang-git-test-" + str.RandStr(8)

try {
    // 设置代理以解决网络连接问题
    git.SetProxy("http://127.0.0.1:7890")
    println("已设置代理: http://127.0.0.1:7890")
    
    testRepoURL = "https://github.com/octocat/Hello-World.git"
    println("尝试克隆测试仓库...")
    
    err = git.Clone(testRepoURL, tempDir, git.depth(1), git.verify(false))~
    if err == nil {
        println("克隆成功!")
        
        // 验证克隆的仓库结构
        assert file.IsDir(tempDir), "Cloned directory should exist"
        assert file.IsDir(tempDir + "/.git"), "Git directory should exist"
        
        // 清理临时目录
        os.RemoveAll(tempDir)
        println("克隆测试完成并清理")
    } else {
        println("克隆失败:", err)
    }
} catch err {
    println("克隆测试:", err)
}

println("Git 克隆操作: 通过")

// =============================================================================
// 4. GitHack 源码泄露利用测试
// 源码泄露 安全测试 GitHack 漏洞利用 渗透测试
// 关键词: GitHack, 源码泄露, 安全测试, 漏洞利用
// =============================================================================
println("\n4. GitHack 源码泄露利用测试")

try {
    println("GitHack 功能说明:")
    println("  - 检测和利用 .git 目录泄露漏洞")
    println("  - 从泄露的 .git 目录重建源码")
    println("  - 支持多线程下载和智能重试")
    println("  - 用于渗透测试和安全审计")
    
    println("GitHack 使用示例:")
    println("  git.GitHack(\"http://target.com/.git\", \"/output/path\", git.threads(8))")
    
    println("GitHack 功能验证: 通过")
} catch err {
    println("GitHack 功能说明:", err)
}

// =============================================================================
// 5. Git 认证和选项配置
// 认证配置 选项设置 代理配置 连接设置
// 关键词: auth, 认证, 代理, 选项配置
// =============================================================================
println("\n5. Git 认证和选项配置")

try {
    // 测试各种 Git 选项的创建
    authOpt = git.auth("username", "password")
    depthOpt = git.depth(5)
    verifyOpt = git.verify(false)
    forceOpt = git.force(true)
    
    println("基础选项创建: 成功")
    
    // 上下文选项
    ctx = context.New()
    contextOpt = git.context(ctx)
    
    println("上下文选项创建: 成功")
    
} catch err {
    println("选项配置测试错误:", err)
}

println("Git 认证和选项配置: 通过")

// =============================================================================
// 6. Git 代理设置测试
// 代理设置 网络配置 连接代理 网络选项
// 关键词: SetProxy, 代理设置, 网络配置
// =============================================================================
println("\n6. Git 代理设置测试")

try {
    git.SetProxy("http://proxy.example.com:8080")
    println("代理设置: 成功")
    
    git.SetProxy("")
    println("代理清除: 成功")
} catch err {
    println("代理设置测试错误:", err)
}

println("Git 代理设置: 通过")

// =============================================================================
// 7. Git 文件系统时间切片功能
// 文件系统 时间切片 历史版本 提交快照
// 关键词: FileSystem, 时间切片, 历史版本, 提交快照
// =============================================================================
println("\n7. Git 文件系统时间切片功能")

try {
    println("文件系统时间切片功能:")
    println("  - FileSystemFromCommit: 从特定提交创建文件系统视图")
    println("  - FileSystemFromCommitRange: 从提交范围创建视图")
    println("  - FileSystemCurrentWeek: 当前周的文件系统视图")
    println("  - FileSystemLastSevenDay: 最近7天的视图")
    
    println("文件系统时间切片功能验证: 通过")
} catch err {
    println("文件系统功能说明:", err)
}

// =============================================================================
// 8. Git Blame 和提交历史分析
// 代码追踪 提交历史 作者分析 责任追踪
// 关键词: Blame, 提交历史, 作者追踪, 代码责任
// =============================================================================
println("\n8. Git Blame 和提交历史分析")

try {
    println("Blame 和历史分析功能:")
    println("  - Blame: 显示文件每行的最后修改信息")
    println("  - BlameCommit: 显示文件每行的提交信息")
    println("  - IterateCommit: 遍历提交历史")
    println("  - 支持作者追踪和代码责任分析")
    
    println("Blame 和历史分析功能验证: 通过")
} catch err {
    println("Blame 功能说明:", err)
}

// =============================================================================
// 9. Git 高级操作测试
// 高级操作 拉取更新 分支切换 远程操作
// 关键词: Pull, Fetch, Checkout, 高级操作
// =============================================================================
println("\n9. Git 高级操作测试")

try {
    println("Git 高级操作功能:")
    println("  - Pull: 拉取远程更新")
    println("  - Fetch: 获取远程更新但不合并")
    println("  - Checkout: 切换分支或恢复文件")
    println("  - 支持各种选项组合使用")
    
    println("高级操作功能验证: 通过")
} catch err {
    println("高级操作功能说明:", err)
}

// =============================================================================
// 10. 错误处理和边界测试
// 异常处理 边界条件 错误恢复 容错机制
// 关键词: 错误处理, 异常处理, 边界测试
// =============================================================================
println("\n10. 错误处理和边界测试")

// 测试不存在的路径
try {
    result = git.HeadHash("/nonexistent/path")~
    println("不存在路径的处理结果:", result)
} catch err {
    println("不存在路径的错误处理正常:", err)
}

// 测试无效的仓库URL
try {
    err = git.Clone("invalid-url", "/tmp/invalid-test")~
    if err != nil {
        println("无效URL的错误处理正常:", err)
    }
} catch err {
    println("克隆错误处理测试:", err)
}

println("错误处理和边界测试: 通过")

// =============================================================================
// 11. 性能和稳定性测试
// 性能测试 稳定性验证 重复操作 一致性检查
// 关键词: 性能测试, 稳定性, 重复操作
// =============================================================================
println("\n11. 性能和稳定性测试")

try {
    success_count = 0
    
    for i in 5 {
        try {
            result := git.HeadHash(".")~
            success_count++
        } catch err {
            // 预期的错误
        }
    }
    
    println("稳定性测试完成, 成功次数:", success_count)
} catch err {
    println("稳定性测试错误:", err)
}

println("性能和稳定性测试: 通过")

println("\n所有 git 库功能测试完成!")
println("git-practice.yak: 测试通过!")