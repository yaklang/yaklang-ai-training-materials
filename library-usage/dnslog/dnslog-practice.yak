/*
Yaklang dnslog (DNSLog服务) 库实践

dnslog库用于创建和检查DNSLog服务，主要用于带外数据检测（Out-of-Band Detection）。
它支持多种DNSLog平台，可用于SQL注入、SSRF、XXE等漏洞的盲注检测。

关键词: DNSLog, 带外检测, 盲注, Out-of-Band, SSRF检测
关键词: dnslog.NewCustomDNSLog, dnslog.random, dnslog.mode, dnslog.local
*/

// 测试NewCustomDNSLog函数存在性
// 关键词: dnslog.NewCustomDNSLog, DNSLog实例创建
func testNewCustomDNSLog() {
    log.info("测试NewCustomDNSLog函数")
    
    assert dnslog.NewCustomDNSLog != undefined, "NewCustomDNSLog函数应存在"
    assert typeof(dnslog.NewCustomDNSLog) == "function", "NewCustomDNSLog应为函数类型"
    
    log.info("NewCustomDNSLog函数存在性验证成功")
}

// 测试配置选项
// 关键词: dnslog.random, dnslog.mode, dnslog.local, dnslog.script
func testConfigOptions() {
    log.info("测试配置选项")
    
    assert dnslog.random != undefined, "random选项应存在"
    assert typeof(dnslog.random) == "function", "random应为函数类型"
    log.info("  ✓ random选项存在 - 随机DNSLog平台")
    
    assert dnslog.mode != undefined, "mode选项应存在"
    assert typeof(dnslog.mode) == "function", "mode应为函数类型"
    log.info("  ✓ mode选项存在 - 指定DNSLog模式")
    
    assert dnslog.local != undefined, "local选项应存在"
    assert typeof(dnslog.local) == "function", "local应为函数类型"
    log.info("  ✓ local选项存在 - 本地DNSLog服务")
    
    assert dnslog.script != undefined, "script选项应存在"
    assert typeof(dnslog.script) == "function", "script应为函数类型"
    log.info("  ✓ script选项存在 - 自定义脚本")
    
    log.info("配置选项验证成功")
}

// 测试LookupFirst函数
// 关键词: dnslog.LookupFirst, DNS查询
func testLookupFirst() {
    log.info("测试LookupFirst函数")
    
    assert dnslog.LookupFirst != undefined, "LookupFirst函数应存在"
    assert typeof(dnslog.LookupFirst) == "function", "LookupFirst应为函数类型"
    
    log.info("LookupFirst函数存在性验证成功")
}

// 模拟使用场景
// 关键词: 使用场景, SQL盲注, SSRF检测, XXE检测
func testUsageScenarios() {
    log.info("模拟使用场景")
    
    // 场景1: SQL盲注检测
    // 关键词: SQL盲注, 带外注入
    log.info("场景1: SQL盲注检测")
    log.info("  示例: dnslogClient = dnslog.NewCustomDNSLog()")
    log.info("  获取域名: domain, token, err = dnslogClient.GetSubDomainAndToken()")
    log.info("  注入Payload: payload = f`SELECT load_file('\\\\\\\\{domain}\\\\share')`")
    log.info("  检查记录: events, err = dnslogClient.CheckDNSLogByToken()")
    log.info("  功能: 通过DNS查询记录判断SQL注入是否成功")
    
    // 场景2: SSRF检测
    // 关键词: SSRF, 服务端请求伪造
    log.info("场景2: SSRF检测")
    log.info("  示例: dnslogClient = dnslog.NewCustomDNSLog(dnslog.random())")
    log.info("  获取域名: domain, token, err = dnslogClient.GetSubDomainAndToken()")
    log.info("  构造SSRF: url = f`http://{domain}/`")
    log.info("  发送请求: poc.HTTP(targetUrl, poc.replaceQueryParam('url', url))")
    log.info("  检查记录: events, err = dnslogClient.CheckDNSLogByToken()")
    log.info("  功能: 通过DNS查询记录检测SSRF漏洞")
    
    // 场景3: XXE检测
    // 关键词: XXE, XML外部实体注入
    log.info("场景3: XXE检测")
    log.info("  示例: dnslogClient = dnslog.NewCustomDNSLog()")
    log.info("  获取域名: domain, token, err = dnslogClient.GetSubDomainAndToken()")
    log.info("  XXE Payload: xml = f`<!DOCTYPE foo [<!ENTITY xxe SYSTEM 'http://{domain}'>]><root>&xxe;</root>`")
    log.info("  检查记录: events, err = dnslogClient.CheckDNSLogByToken()")
    log.info("  功能: 通过DNS查询记录检测XXE漏洞")
    
    // 场景4: 自定义DNSLog平台
    // 关键词: 自定义平台, 本地DNSLog
    log.info("场景4: 自定义DNSLog平台")
    log.info("  示例: dnslogClient = dnslog.NewCustomDNSLog(dnslog.local(true))")
    log.info("  功能: 使用本地DNSLog服务进行测试")
    
    log.info("使用场景模拟完成")
}

func main() {
    log.info("开始Yaklang dnslog库功能测试")
    
    // 基础函数测试
    testNewCustomDNSLog()
    testLookupFirst()
    
    // 配置选项测试
    testConfigOptions()
    
    // 场景测试
    testUsageScenarios()
    
    log.info("dnslog库功能测试完成")
    log.info("dnslog库提供了DNSLog服务支持，是盲注检测和带外数据检测的重要工具")
}

// 执行主函数
main()
