// Filesys库核心功能测试 - 文件系统操作验证
// 关键词: filesys文件系统, 文件操作, 目录遍历, 文件管理

// 创建测试环境
testDir = "/tmp/yaklang_filesys_test_" + randstr(8)
err = file.MkdirAll(testDir)
assert err == nil, "测试目录应创建成功"

// 创建测试文件结构
testFiles = ["test1.txt", "test2.log", "test3.yaml", "config.json"]
for fileName in testFiles {
    filePath = file.Join(testDir, fileName)
    content = f"测试文件内容: {fileName}\n时间戳: {timestamp()}"
    fileErr = file.Save(filePath, content)
    assert fileErr == nil, f"文件{fileName}应创建成功"
}

// 创建子目录结构
subDir = file.Join(testDir, "subdir")
subErr = file.MkdirAll(subDir)
assert subErr == nil, "子目录应创建成功"

subFiles = ["sub1.txt", "sub2.log"]
for subFileName in subFiles {
    subFilePath = file.Join(subDir, subFileName)
    subContent = f"子目录文件: {subFileName}"
    subFileErr = file.Save(subFilePath, subContent)
    assert subFileErr == nil, f"子目录文件{subFileName}应创建成功"
}

// 文件信息获取验证
testFilePath = file.Join(testDir, "test1.txt")
assert file.IsExisted(testFilePath), "测试文件应存在"

fileInfo, statErr = file.Stat(testFilePath)
assert statErr == nil, "文件状态获取应成功"
assert fileInfo != nil, "文件信息不应为空"
assert fileInfo.Size() > 0, "文件大小应大于0"
assert fileInfo.IsDir() == false, "文件应不是目录"

// 目录信息验证
dirInfo, dirStatErr = file.Stat(subDir)
assert dirStatErr == nil, "目录状态获取应成功"
assert dirInfo != nil, "目录信息不应为空"
assert dirInfo.IsDir() == true, "目录应正确标识为目录"

// 目录列表功能验证
assert file.Ls != undefined, "Ls函数应存在"

dirContents = file.Ls(testDir)
assert dirContents != nil, "目录列表应成功"
assert len(dirContents) == 5, "主目录应包含5个项目"

// 验证列表内容
foundFiles = 0
foundDirs = 0
for item in dirContents {
    if item.IsDir {
        foundDirs++
    } else {
        foundFiles++
    }
    assert item.Name != "", "文件名不应为空"
}
assert foundFiles == 4, "应找到4个文件"
assert foundDirs == 1, "应找到1个目录"

// 文件复制操作验证
assert file.Cp != undefined, "Cp函数应存在"

sourceFile = file.Join(testDir, "test1.txt")
targetFile = file.Join(testDir, "test1_copy.txt")

cpErr = file.Cp(sourceFile, targetFile)
assert cpErr == nil, "文件复制应成功"
assert file.IsExisted(targetFile), "复制的文件应存在"

// 验证复制文件内容
sourceContent, sourceReadErr = file.ReadFile(sourceFile)
assert sourceReadErr == nil, "源文件读取应成功"

targetContent, targetReadErr = file.ReadFile(targetFile)
assert targetReadErr == nil, "目标文件读取应成功"
assert sourceContent == targetContent, "复制文件内容应与源文件相同"

// 文件移动操作验证
assert file.Mv != undefined, "Mv函数应存在"

moveSource = targetFile
moveTarget = file.Join(testDir, "moved_file.txt")

mvErr = file.Mv(moveSource, moveTarget)
assert mvErr == nil, "文件移动应成功"
assert file.IsExisted(moveTarget), "移动后的文件应存在"
assert !file.IsExisted(moveSource), "移动前的文件应不存在"

// 路径操作验证
testPath1 = "/tmp/test"
testPath2 = "file.txt"
joinedPath = file.Join(testPath1, testPath2)
assert joinedPath == "/tmp/test/file.txt", "路径拼接应正确"

// 测试多级路径拼接
multiPath = file.Join("/tmp", "dir1", "dir2", "file.txt")
assert str.Contains(multiPath, "/tmp"), "多级路径应包含根路径"
assert str.HasSuffix(multiPath, "file.txt"), "多级路径应以文件名结尾"

// 文件扩展名处理
testFileName = "example.test.txt"
ext = file.GetExt(testFileName)
assert ext == ".txt", "文件扩展名应正确提取"

baseName = file.GetBase(testFileName)
assert baseName == testFileName, "基础文件名应正确"

// 目录名提取
dirName = file.GetDirPath("/path/to/file.txt")
assert dirName == "/path/to/", "目录名应正确提取"

// 批量文件处理
processedCount = 0
for fileName in testFiles {
    filePath = file.Join(testDir, fileName)
    if file.IsExisted(filePath) {
        // 读取文件内容
        content, readErr = file.ReadFile(filePath)
        assert readErr == nil, f"文件{fileName}读取应成功"
        assert len(content) > 0, f"文件{fileName}内容不应为空"
        
        // 修改文件内容（转换为字符串）
        contentStr = string(content)
        newContent = contentStr + "\n追加内容: " + timestamp()
        writeErr = file.Save(filePath, newContent)
        assert writeErr == nil, f"文件{fileName}写入应成功"
        
        processedCount++
    }
}
assert processedCount == len(testFiles), "所有文件都应被处理"

// 文件大小统计
totalSize = 0
for fileName in testFiles {
    filePath = file.Join(testDir, fileName)
    if file.IsExisted(filePath) {
        info, err = file.Stat(filePath)
        if err == nil {
            totalSize += info.Size()
        }
    }
}
assert totalSize > 0, "总文件大小应大于0"

// 文件类型检查
textFiles = []
logFiles = []
yamlFiles = []
jsonFiles = []

for fileName in testFiles {
    if str.HasSuffix(fileName, ".txt") {
        textFiles = append(textFiles, fileName)
    } else if str.HasSuffix(fileName, ".log") {
        logFiles = append(logFiles, fileName)
    } else if str.HasSuffix(fileName, ".yaml") {
        yamlFiles = append(yamlFiles, fileName)
    } else if str.HasSuffix(fileName, ".json") {
        jsonFiles = append(jsonFiles, fileName)
    }
}

assert len(textFiles) == 1, "应有1个.txt文件"
assert len(logFiles) == 1, "应有1个.log文件"
assert len(yamlFiles) == 1, "应有1个.yaml文件"
assert len(jsonFiles) == 1, "应有1个.json文件"

// 临时文件处理
tempFile = file.Join(testDir, "temp_" + randstr(6) + ".tmp")
tempErr = file.Save(tempFile, "临时数据")
assert tempErr == nil, "临时文件应创建成功"
assert file.IsExisted(tempFile), "临时文件应存在"

// 清理临时文件
rmErr = file.Rm(tempFile)
assert rmErr == nil, "临时文件删除应成功"
assert !file.IsExisted(tempFile), "临时文件应已删除"

// 错误处理验证
nonExistentFile = file.Join(testDir, "nonexistent.txt")
assert !file.IsExisted(nonExistentFile), "不存在的文件应返回false"

_, nonExistentErr = file.ReadFile(nonExistentFile)
assert nonExistentErr != nil, "读取不存在文件应返回错误"

// 文件Walk功能验证（修正回调函数参数）
assert file.Walk != undefined, "Walk函数应存在"

walkFileCount = 0
walkDirCount = 0
file.Walk(testDir, func(fileInfo) {
    if fileInfo != nil {
        if fileInfo.IsDir {
            walkDirCount++
        } else {
            walkFileCount++
        }
        assert fileInfo.Name != "", "Walk文件名不应为空"
    }
})

assert walkFileCount >= 1, "Walk应遍历到至少1个文件"
assert walkDirCount >= 0, "Walk目录数量应为非负数"

// 清理测试环境
cleanErr = os.RemoveAll(testDir)
assert cleanErr == nil, "测试目录清理应成功"
assert !file.IsExisted(testDir), "测试目录应已删除"

/*
Filesys库核心功能验证完成:

1. ✓ 文件信息获取:
   - file.Stat() - 获取文件详细信息
   - file.IsExisted() - 文件存在性检查
   - 文件大小、修改时间、类型识别

2. ✓ 目录操作:
   - file.Ls() - 目录内容列表
   - file.MkdirAll() - 递归创建目录
   - os.RemoveAll() - 递归删除目录

3. ✓ 文件操作:
   - file.Cp() - 文件复制，保持内容完整性
   - file.Mv() - 文件移动/重命名
   - file.Rm() - 文件删除
   - file.Save() - 文件写入
   - file.ReadFile() - 文件读取

4. ✓ 路径处理:
   - file.Join() - 路径拼接，支持多级路径
   - file.GetExt() - 文件扩展名提取
   - file.GetBase() - 基础文件名获取
   - file.GetDirPath() - 目录名提取

5. ✓ 高级功能:
   - 批量文件处理和内容修改
   - 文件类型识别和分类
   - 文件大小统计和分析
   - 临时文件管理和清理
   - 完善的错误处理机制
   - file.Walk() - 目录遍历功能

Filesys库为Yaklang提供了完整的文件系统操作能力，
所有核心功能通过assert验证确保API完整性和功能正确性。
*/