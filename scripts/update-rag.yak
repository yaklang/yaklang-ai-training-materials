#!/usr/bin/env yak

// =============================================================================
// RAG 增量更新工具 - Update RAG with Diff ZIP
// 功能: 读取差异 ZIP 包，更新 RAG 知识库，支持使用 embedding 服务
// 用途: 增量更新 RAG 索引、自动化知识库更新、CI/CD 集成
//
// 核心技术栈:
// - rag.Import/Export: RAG 导入导出
// - rag.GetCollection: 获取 RAG 集合
// - zip.Recursive/ExtractFile: ZIP 文件处理
// - twofa.GetUTCCode: TOTP 验证
// - poc.HTTP: HTTP 请求
//
// 使用示例:
// 方式1: 命令行参数
// yak scripts/update-rag.yak --rag-file-dir /tmp --target-dirs scripts,apps --diff-zip diff-fs.zip --embedding-host 127.0.0.1 --embedding-port 9099 --totp-secret my-secret
//
// 方式2: 环境变量
// export TARGET_DIRS="scripts,apps"
// yak scripts/update-rag.yak --rag-file-dir /tmp --diff-zip diff-fs.zip --embedding-host 127.0.0.1 --embedding-port 9099 --totp-secret my-secret
//
// 应用场景: RAG 增量更新、知识库同步、自动化索引更新
// 关键词: rag-update diff-update embedding-client incremental-update
// 搜索标签: #rag #embedding #incremental-update #knowledge-base
// =============================================================================

__DESC__ = "Update RAG knowledge base with diff ZIP file"

yakit.AutoInitYakit()

// =============================================================================
// CLI 参数配置模块 - 命令行接口定义
// 功能: 定义脚本的命令行参数，配置 RAG 文件、差异包、embedding 服务等
// =============================================================================

// RAG 文件目录（用于读取和保存 RAG 文件）
ragFileDir = cli.String(
    "rag-file-dir",
    cli.setVerboseName("RAG文件目录"),
    cli.setRequired(true),
    cli.setHelp("Directory for RAG files, will read {dir}_old.rag and generate {dir}_new.rag")
)

// 目标目录列表（逗号分隔）
targetDirs = cli.String(
    "target-dirs",
    cli.setVerboseName("目标目录"),
    cli.setDefault(""),
    cli.setHelp("Target directories to process, comma-separated (e.g., scripts,apps). Can also be set via TARGET_DIRS environment variable.")
)

// 差异 ZIP 文件路径
diffZipPath = cli.String(
    "diff-zip",
    cli.setVerboseName("ZIP路径"),
    cli.setRequired(true),
    cli.setHelp("Path to the diff ZIP file")
)

ragCollectionNamePrefix = "yaklang-aikb"

// Embedding 服务器地址
embeddingHost = cli.String(
    "embedding-host",
    cli.setDefault("127.0.0.1"),
    cli.setHelp("Embedding server address")
)

// Embedding 服务器端口
embeddingPort = cli.Int(
    "embedding-port",
    cli.setDefault(9099),
    cli.setHelp("Embedding server port")
)

// TOTP 密钥（可选，如果 embedding 服务需要验证）
totpSecret = cli.String(
    "totp-secret",
    cli.setDefault(""),
    cli.setHelp("TOTP secret for embedding service authentication (optional)")
)

// 超时时间（秒）
timeout = cli.Int(
    "timeout",
    cli.setDefault(30),
    cli.setHelp("HTTP request timeout in seconds")
)

cli.check()

// =============================================================================
// 参数验证模块
// =============================================================================

// 从环境变量读取目标目录（如果未通过命令行参数指定）
if targetDirs == "" {
    envTargetDirs = os.Getenv("TARGET_DIRS")
    if envTargetDirs != "" {
        targetDirs = envTargetDirs
        log.info("Using target directories from environment variable: %s", targetDirs)
    }
}

if diffZipPath == "" || ragFileDir == "" || targetDirs == "" {
    die("Required parameters: --diff-zip, --rag-file-dir, --target-dirs (or TARGET_DIRS env var)")
}

if !file.IsExisted(diffZipPath) {
    die(sprintf("Diff ZIP file does not exist: %s", diffZipPath))
}

if !file.IsExisted(ragFileDir) {
    die(sprintf("RAG file directory does not exist: %s", ragFileDir))
}

// 解析目标目录列表
targetDirList = str.Split(targetDirs, ",")
if len(targetDirList) == 0 {
    die("No target directories specified")
}

// 去除空格
for i, dir := range targetDirList {
    targetDirList[i] = str.TrimSpace(dir)
}

// 过滤空字符串
filteredDirList = []
for _, dir := range targetDirList {
    if dir != "" {
        filteredDirList = append(filteredDirList, dir)
    }
}
targetDirList = filteredDirList

if len(targetDirList) == 0 {
    die("No valid target directories after filtering")
}

log.info("=== RAG Update Configuration ===")
log.info("RAG File Dir: %s", ragFileDir)
log.info("Target Dirs: %v", targetDirList)
log.info("Diff ZIP: %s", diffZipPath)
log.info("Embedding Server: %s:%d", embeddingHost, embeddingPort)
if totpSecret != "" {
    log.info("TOTP Auth: Enabled")
} else {
    log.info("TOTP Auth: Disabled")
}

// =============================================================================
// Embedding 处理函数定义
// 功能: 封装 embedding 请求逻辑，支持 TOTP 验证
// =============================================================================

// 用于本地开发环境
dev_env_embeddingHandle = (text) => {
    if text == "" {
        log.error("Empty text for embedding")
        return nil
    }
    
    log.info("Generating embedding for text (length: %d)", len(text))

    data = {"input": text,"encoding_format":"float"}
    reqPacket = `POST /embeddings HTTP/1.1
Content-Type: application/json
Host: 127.0.0.1:11435

%v` % json.dumps(data)
    rsp,req,err = poc.HTTP(reqPacket, poc.timeout(30))
    if err {
        log.error("Failed to send embedding request: %v", err)
        return nil
    }

    body = poc.GetHTTPPacketBody(rsp)
    try {
        res = json.loads(body)[0]['embedding'][0]
        return res
    } catch err {
        println(body)
        log.error("Parse embedding data failed: %v" % err)
        return nil
    }
    
}

prod_env_embeddingHandle = func(text) {
    if text == "" {
        log.error("Empty text for embedding")
        return nil
    }
    
    log.info("Generating embedding for text (length: %d)", len(text))
    
    // 如果配置了 TOTP，生成验证码
    totpCode = ""
    if totpSecret != "" {
        totpCode = twofa.GetUTCCode(totpSecret)
        log.info("Generated TOTP code: %s", totpCode)
    }
    
    // 构建请求体
    requestBody = json.dumps({
        "input": text,
        "model": "embedding",
    })
    
    // 构建 HTTP 请求
    httpRequest = sprintf(`POST /embeddings HTTP/1.1
Host: %s
Content-Type: application/json`, embeddingHost)
    
    // 如果有 TOTP，添加验证头
    if totpCode != "" {
        httpRequest = sprintf(`%s
X-TOTP-Code: %s`, httpRequest, totpCode)
    }
    
    httpRequest = sprintf(`%s
Content-Length: %d

%s`, httpRequest, len(requestBody), requestBody)
    
    // 发送请求
    try {
        rsp, _, err = poc.HTTP(
            httpRequest,
            poc.host(embeddingHost),
            poc.port(embeddingPort),
            poc.timeout(timeout),
        )
        
        if err != nil {
            log.error("Failed to send embedding request: %v", err)
            return nil
        }
        
        // 获取状态码
        statusCode = poc.GetStatusCodeFromResponse(rsp)
        
        if statusCode != 200 {
            log.error("Embedding request failed with status code: %d", statusCode)
            _, body = poc.Split(rsp)
            log.error("Response body: %s", string(body))
            return nil
        }
        
        // 解析响应
        _, body = poc.Split(rsp)
        responseData = json.loads(body)
        
        if responseData["data"] == nil || len(responseData["data"]) == 0 {
            log.error("No embedding data in response")
            return nil
        }
        
        embeddingData = responseData["data"][0]
        embedding = embeddingData["embedding"]
        
        log.info("Embedding generated successfully (dimension: %d)", len(embedding))
        return embedding
        
    } catch embeddingErr {
        log.error("Failed to generate embedding: %v", embeddingErr)
        return nil
    }
}

embeddingHandle = prod_env_embeddingHandle

// =============================================================================
// 读取差异 ZIP 文件
// 功能: 解析差异 ZIP，提取所有文件内容，按目录分组
// =============================================================================

log.info("")
log.info("=== Step 1: Reading diff ZIP file ===")

// 按目录分组存储文件
diffFilesByDir = make(map[string]map[string]string)
for _, dir := range targetDirList {
    diffFilesByDir[dir] = make(map[string]string)
}

totalFileCount = 0

err = zip.Recursive(diffZipPath, func(isDir, pathName, info) {
    if isDir {
        return
    }
    if str.HasPrefix(pathName, "__MACOSX/") {
        return
    }
    if info.Name() == ".DS_Store" {
        return
    }
    
    // 检查文件是否属于目标目录
    for _, targetDir := range targetDirList {
        if str.HasPrefix(pathName, targetDir + "/") || str.HasPrefix(pathName, targetDir) {
            try {
                content = zip.ExtractFile(diffZipPath, pathName)~
                diffFilesByDir[targetDir][pathName] = string(content)
                totalFileCount++
                log.info("Extracted file [%s]: %s (size: %d bytes)", targetDir, pathName, len(content))
            } catch extractErr {
                log.error("Failed to extract file %s: %v", pathName, extractErr)
            }
            break
        }
    }
})

if err != nil {
    log.error("Failed to read diff ZIP file: %v", err)
    die(sprintf("Failed to read diff ZIP file: %v", err))
}

log.info("✓ Diff ZIP processed: %d files extracted", totalFileCount)

// 显示每个目录的文件数量
for _, dir := range targetDirList {
    log.info("  - %s: %d files", dir, len(diffFilesByDir[dir]))
}

// =============================================================================
// 处理每个目录的 RAG 更新
// =============================================================================

// 用于存储所有目录的处理结果
dirResults = make(map[string]map[string]any)
allReports = []

for _, targetDir := range targetDirList {
    log.info("")
    log.info("=" * 80)
    log.info("Processing directory: %s", targetDir)
    log.info("=" * 80)
    
    // 构造文件路径
    oldRagPath = sprintf("%s/%s_old.rag", ragFileDir, targetDir)
    newRagPath = sprintf("%s/%s_new.rag", ragFileDir, targetDir)
    ragCollectionName = sprintf("%s-%s", ragCollectionNamePrefix, targetDir)
    
    // 获取该目录的文件
    dirFiles = diffFilesByDir[targetDir]
    
    if len(dirFiles) == 0 {
        continue
    }

    // 初始化结果
    dirResult = {
        "targetDir": targetDir,
        "oldRagPath": oldRagPath,
        "newRagPath": newRagPath,
        "collectionName": ragCollectionName,
        "oldDocCount": 0,
        "newDocCount": 0,
        "fileCount": len(dirFiles),
        "successCount": 0,
        "failedCount": 0,
        "failedFiles": [],
        "successFiles": [],
    }
    
    // 移除现有集合
    rag.DeleteCollection(ragCollectionName)
    
    // 导入或创建 RAG
    if file.IsExisted(oldRagPath) {
        log.info("=== Step 2.%s: Importing RAG file ===", targetDir)
        log.info("Importing: %s", oldRagPath)
        
        try {
            err = rag.Import(oldRagPath, rag.importName(ragCollectionName))
            if err != nil {
                log.error("Failed to import RAG file: %v", err)
                dirResult["error"] = sprintf("Failed to import: %v", err)
                dirResults[targetDir] = dirResult
                continue
            }
            
            log.info("✓ RAG file imported successfully: %s", ragCollectionName)
            
        } catch importErr {
            log.error("Failed to import RAG file: %v", importErr)
            dirResult["error"] = sprintf("Failed to import: %v", importErr)
            dirResults[targetDir] = dirResult
            continue
        }
    } else {
        log.info("=== Step 2.%s: Creating new RAG collection ===", targetDir)
        log.info("No old RAG file found, will create new: %s", oldRagPath)
    }
    
    // 加载 RAG Collection
    log.info("")
    log.info("=== Step 3.%s: Loading RAG collection ===", targetDir)
    
    ragSystem, err = rag.GetCollection(ragCollectionName, rag.embeddingHandle(embeddingHandle))
    if err != nil {
        log.error("Failed to load RAG collection: %v", err)
        dirResult["error"] = sprintf("Failed to load collection: %v", err)
        dirResults[targetDir] = dirResult
        continue
    }
    
    log.info("✓ RAG collection loaded: %s", ragCollectionName)
    
    // 获取旧文档数量
    oldDocCount = 0
    oldDocCount, err = ragSystem.CountDocuments()
    if err != nil {
        log.error("Failed to get old document count: %v", err)
        oldDocCount = 0
    } else {
        log.info("Old RAG document count: %d", oldDocCount)
    }
    dirResult["oldDocCount"] = oldDocCount
    
    // 添加文件到 RAG
    log.info("")
    log.info("=== Step 4.%s: Adding files to RAG ===", targetDir)
    
    successCount = 0
    failedCount = 0
    failedFiles = []
    successFiles = []
    
    for filePath, content := range dirFiles {
        if content == "" {
            log.warn("Skipping empty file: %s", filePath)
            continue
        }
        
        log.info("Adding file to RAG: %s (size: %d bytes)", filePath, len(content))
        
        try {
            ragSystem.Add(filePath, content)~
            successCount++
            successFiles = append(successFiles, filePath)
            log.info("✓ Added: %s", filePath)
        } catch addErr {
            log.error("Failed to add file %s: %v", filePath, addErr)
            failedCount++
            failedFiles = append(failedFiles, filePath)
        }
    }
    
    log.info("")
    log.info("=== Add Results for %s ===", targetDir)
    log.info("Success: %d files", successCount)
    log.info("Failed: %d files", failedCount)
    
    dirResult["successCount"] = successCount
    dirResult["failedCount"] = failedCount
    dirResult["failedFiles"] = failedFiles
    dirResult["successFiles"] = successFiles
    
    if failedCount > 0 {
        log.warn("Failed files:")
        for i, filePath := range failedFiles {
            log.warn("  %d. %s", i+1, filePath)
        }
    }
    
    // 获取新文档数量
    newDocCount = 0
    newDocCount, err = ragSystem.CountDocuments()
    if err != nil {
        log.error("Failed to get new document count: %v", err)
        newDocCount = 0
    } else {
        log.info("New RAG document count: %d", newDocCount)
        log.info("Document count increased: %d", newDocCount - oldDocCount)
    }
    dirResult["newDocCount"] = newDocCount
    
    // 导出 RAG 文件
    log.info("")
    log.info("=== Step 5.%s: Exporting RAG file ===", targetDir)
    
    try {
        err = rag.Export(ragCollectionName, newRagPath)
        if err != nil {
            log.error("Failed to export RAG: %v", err)
            dirResult["error"] = sprintf("Failed to export: %v", err)
            dirResults[targetDir] = dirResult
            continue
        }
        
        // 验证导出的文件
        if !file.IsExisted(newRagPath) {
            log.error("Export succeeded but file does not exist: %s", newRagPath)
            dirResult["error"] = "Failed to verify exported file"
            dirResults[targetDir] = dirResult
            continue
        }
        
        // 获取文件大小
        fileInfo = file.Stat(newRagPath)~
        fileSize = fileInfo.Size()
        dirResult["fileSize"] = fileSize
        
        log.info("✓ RAG file exported successfully: %s", newRagPath)
        log.info("  File size: %d bytes (%.2f MB)", fileSize, float64(fileSize)/1024/1024)
        
    } catch exportErr {
        log.error("Failed to export RAG: %v", exportErr)
        dirResult["error"] = sprintf("Failed to export: %v", exportErr)
        dirResults[targetDir] = dirResult
        continue
    }
    
    // 保存该目录的结果
    dirResults[targetDir] = dirResult
    
    log.info("✓ Directory %s processed successfully", targetDir)
}

// =============================================================================
// 生成汇总报告
// 功能: 生成所有目录的 Markdown 格式更新报告
// =============================================================================

log.info("")
log.info("=== Step 6: Generating update reports ===")

summaryReportPath = sprintf("%s/update-summary.md", ragFileDir)

summaryReport = sprintf("# RAG 批量更新汇总报告\n\n")
summaryReport += sprintf("**更新时间**: %s\n\n", time.Now().Format("2006-01-02 15:04:05"))
summaryReport += sprintf("**RAG 文件目录**: %s\n", ragFileDir)
summaryReport += sprintf("**差异包**: %s\n", diffZipPath)
summaryReport += sprintf("**目标目录**: %s\n\n", targetDirs)

summaryReport += "## Embedding 配置\n\n"
summaryReport += sprintf("- 服务器: %s:%d\n", embeddingHost, embeddingPort)
if totpSecret != "" {
    summaryReport += "- TOTP 认证: 启用\n"
} else {
    summaryReport += "- TOTP 认证: 禁用\n"
}
summaryReport += sprintf("- 超时时间: %d 秒\n\n", timeout)

summaryReport += "## 处理汇总\n\n"

totalSuccess = 0
totalFailed = 0
totalOldDocs = 0
totalNewDocs = 0

for _, dir := range targetDirList {
    result = dirResults[dir]
    if result == nil {
        continue
    }
    
    totalSuccess += result["successCount"]
    totalFailed += result["failedCount"]
    totalOldDocs += result["oldDocCount"]
    totalNewDocs += result["newDocCount"]
}

summaryReport += sprintf("- 处理目录总数: %d\n", len(targetDirList))
summaryReport += sprintf("- 总文件数: %d\n", totalFileCount)
summaryReport += sprintf("- 成功添加: %d\n", totalSuccess)
summaryReport += sprintf("- 添加失败: %d\n", totalFailed)
summaryReport += sprintf("- 旧文档总数: %d\n", totalOldDocs)
summaryReport += sprintf("- 新文档总数: %d\n", totalNewDocs)
summaryReport += sprintf("- 文档增量: %d\n\n", totalNewDocs - totalOldDocs)

summaryReport += "## 各目录详情\n\n"

for _, dir := range targetDirList {
    result = dirResults[dir]
    if result == nil {
        summaryReport += sprintf("### %s\n\n", dir)
        summaryReport += "- 状态: ❌ 未处理\n\n"
        continue
    }
    
    summaryReport += sprintf("### %s\n\n", dir)
    
    if result["error"] != nil {
        summaryReport += sprintf("- 状态: ❌ 失败\n")
        summaryReport += sprintf("- 错误: %s\n\n", result["error"])
        continue
    }
    
    summaryReport += sprintf("- 状态: ✅ 成功\n")
    summaryReport += sprintf("- 旧 RAG: `%s`\n", result["oldRagPath"])
    summaryReport += sprintf("- 新 RAG: `%s`\n", result["newRagPath"])
    summaryReport += sprintf("- 集合名称: `%s`\n", result["collectionName"])
    summaryReport += sprintf("- 文件数: %d\n", result["fileCount"])
    summaryReport += sprintf("- 成功: %d\n", result["successCount"])
    summaryReport += sprintf("- 失败: %d\n", result["failedCount"])
    summaryReport += sprintf("- 旧文档数: %d\n", result["oldDocCount"])
    summaryReport += sprintf("- 新文档数: %d\n", result["newDocCount"])
    summaryReport += sprintf("- 文档增量: %d\n", result["newDocCount"] - result["oldDocCount"])
    
    if result["fileSize"] != nil {
        summaryReport += sprintf("- 文件大小: %d bytes (%.2f MB)\n", result["fileSize"], float64(result["fileSize"])/1024/1024)
    }
    
    summaryReport += "\n"
}

// 保存汇总报告
err = file.Save(summaryReportPath, summaryReport)
if err != nil {
    log.warn("Failed to write summary report: %v", err)
} else {
    log.info("✓ Summary report generated: %s", summaryReportPath)
}

// 为每个目录生成详细报告
for _, dir := range targetDirList {
    result = dirResults[dir]
    if result == nil || result["error"] != nil {
        continue
    }
    
    reportPath = sprintf("%s/%s_update-report.md", ragFileDir, dir)
    
    report = sprintf("# RAG 更新报告 - %s\n\n", dir)
    report += sprintf("**更新时间**: %s\n\n", time.Now().Format("2006-01-02 15:04:05"))
    report += sprintf("**目录**: %s\n", dir)
    report += sprintf("**原始 RAG**: %s\n", result["oldRagPath"])
    report += sprintf("**输出 RAG**: %s\n", result["newRagPath"])
    report += sprintf("**集合名称**: %s\n", result["collectionName"])
    report += sprintf("**差异包**: %s\n\n", diffZipPath)
    
    report += "## 文档数量统计\n\n"
    report += sprintf("- 旧 RAG 文档数量: %d\n", result["oldDocCount"])
    report += sprintf("- 新 RAG 文档数量: %d\n", result["newDocCount"])
    report += sprintf("- 文档增量: %d\n\n", result["newDocCount"] - result["oldDocCount"])
    
    report += "## 处理统计\n\n"
    report += sprintf("- 差异文件总数: %d\n", result["fileCount"])
    report += sprintf("- 成功添加: %d\n", result["successCount"])
    report += sprintf("- 添加失败: %d\n\n", result["failedCount"])
    
    if result["successCount"] > 0 {
        report += "## 成功添加的文件\n\n"
        successFiles = result["successFiles"]
        for i, filePath := range successFiles {
            report += sprintf("%d. %s\n", i+1, filePath)
        }
        report += "\n"
    }
    
    if result["failedCount"] > 0 {
        report += "## 添加失败的文件\n\n"
        failedFiles = result["failedFiles"]
        for i, filePath := range failedFiles {
            report += sprintf("%d. %s\n", i+1, filePath)
        }
        report += "\n"
    }
    
    report += "## Embedding 配置\n\n"
    report += sprintf("- 服务器: %s:%d\n", embeddingHost, embeddingPort)
    if totpSecret != "" {
        report += "- TOTP 认证: 启用\n"
    } else {
        report += "- TOTP 认证: 禁用\n"
    }
    report += sprintf("- 超时时间: %d 秒\n\n", timeout)
    
    report += "## 输出文件信息\n\n"
    report += sprintf("- 文件路径: %s\n", result["newRagPath"])
    if result["fileSize"] != nil {
        report += sprintf("- 文件大小: %d bytes (%.2f MB)\n", result["fileSize"], float64(result["fileSize"])/1024/1024)
    }
    
    // 保存报告
    err = file.Save(reportPath, report)
    if err != nil {
        log.warn("Failed to write report for %s: %v", dir, err)
    } else {
        log.info("✓ Report generated for %s: %s", dir, reportPath)
    }
}

// 打印汇总报告到控制台
println("")
println(summaryReport)

// =============================================================================
// 总结输出
// =============================================================================

log.info("")
log.info("=== Update Summary ===")
log.info("✓ RAG batch update completed")
log.info("  - Directories processed: %d", len(targetDirList))
log.info("  - Total files: %d", totalFileCount)
log.info("  - Total success: %d", totalSuccess)
log.info("  - Total failed: %d", totalFailed)
log.info("  - Old document count: %d", totalOldDocs)
log.info("  - New document count: %d", totalNewDocs)
log.info("  - Document increased: %d", totalNewDocs - totalOldDocs)
log.info("  - Summary report: %s", summaryReportPath)

hasError = false
for _, dir := range targetDirList {
    result = dirResults[dir]
    if result == nil || result["error"] != nil || result["failedCount"] > 0 {
        hasError = true
        break
    }
}

if hasError {
    log.warn("⚠️  Some directories or files failed, please check the reports")
    os.Exit(1)
} else {
    log.info("✓ All directories and files processed successfully")
    os.Exit(0)
}
