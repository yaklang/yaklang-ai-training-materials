#!/usr/bin/env yak

__DESC__ = "Compare two ZIP files using diff.DiffZIPFile and create diff ZIP package"

yakit.AutoInitYakit()

oldZipPath = cli.String("old", cli.setRequired(true), cli.setHelp("Path to the old ZIP file"))
newZipPath = cli.String("new", cli.setRequired(true), cli.setHelp("Path to the new ZIP file"))
outputPath = cli.String("output", cli.setDefault("diff-fs.zip"), cli.setHelp("Output diff ZIP file path"))

cli.check()

if oldZipPath == "" || newZipPath == "" {
    die("Both --old and --new parameters are required")
}

if !file.IsExisted(oldZipPath) {
    die(sprintf("Old ZIP file does not exist: %s", oldZipPath))
}

if !file.IsExisted(newZipPath) {
    die(sprintf("New ZIP file does not exist: %s", newZipPath))
}

log.info("Analyzing ZIP files using diff.DiffZIPFile...")
log.info("Old: %s", oldZipPath)
log.info("New: %s", newZipPath)

// 使用diff.DiffZIPFile分析差异并收集变更信息
changeStats = {
    "added": [],
    "modified": [],
    "deleted": []
}

// 收集需要包含在差异包中的文件内容
diffFiles = make(map[string]string)
allDiffFiles = []
changedScripts = []
addedScripts = []
deletedScripts = []

// 获取新ZIP文件中的所有文件内容（用于构建差异包）
newFilesContent = make(map[string]string)
err = zip.Recursive(newZipPath, func(isDir, pathName, info) {
    if !isDir {
        try {
            content = zip.ExtractFile(newZipPath, pathName)~
            newFilesContent[pathName] = string(content)
        } catch extractErr {
            log.error("Failed to extract file %s: %v", pathName, extractErr)
        }
    }
})
if err != nil {
    log.error("Failed to scan new ZIP file: %v", err)
}

log.info("New ZIP contains %d files", len(newFilesContent))

// 使用diff.DiffZIPFile分析差异
_, err = diff.DiffZIPFile(oldZipPath, newZipPath, func(commit, change, patch) {
    if patch == nil {
        return
    }
    
    patchStr = patch.String()
    
    // 分析变更类型并提取文件名
    if patchStr.Contains("new file mode") {
        // 新增文件
        lines = str.Split(patchStr, "\n")
        for line in lines {
            if str.HasPrefix(line, "+++ b/") {
                filename = str.TrimPrefix(line, "+++ b/")
                changeStats["added"] = append(changeStats["added"], filename)
                
                // 添加到差异包
                if newFilesContent[filename] != nil {
                    diffFiles[filename] = newFilesContent[filename]
                    allDiffFiles = append(allDiffFiles, filename)
                    
                    // 如果是脚本文件
                    if str.HasSuffix(filename, ".yak") {
                        addedScripts = append(addedScripts, filename)
                    }
                }
                
                log.info("Detected added file: %s", filename)
                break
            }
        }
    } else if patchStr.Contains("deleted file mode") {
        // 删除文件
        lines = str.Split(patchStr, "\n")
        for line in lines {
            if str.HasPrefix(line, "--- a/") {
                filename = str.TrimPrefix(line, "--- a/")
                changeStats["deleted"] = append(changeStats["deleted"], filename)
                
                // 如果是脚本文件
                if str.HasSuffix(filename, ".yak") {
                    deletedScripts = append(deletedScripts, filename)
                }
                
                log.info("Detected deleted file: %s", filename)
                break
            }
        }
    } else {
        // 修改文件
        lines = str.Split(patchStr, "\n")
        for line in lines {
            if str.HasPrefix(line, "+++ b/") {
                filename = str.TrimPrefix(line, "+++ b/")
                
                // 避免重复添加
                alreadyAdded := false
                for _, existing := range changeStats["modified"] {
                    if existing == filename {
                        alreadyAdded = true
                        break
                    }
                }
                
                if !alreadyAdded {
                    changeStats["modified"] = append(changeStats["modified"], filename)
                    
                    // 添加到差异包
                    if newFilesContent[filename] != nil {
                        diffFiles[filename] = newFilesContent[filename]
                        allDiffFiles = append(allDiffFiles, filename)
                        
                        // 如果是脚本文件
                        if str.HasSuffix(filename, ".yak") {
                            changedScripts = append(changedScripts, filename)
                        }
                    }
                    
                    log.info("Detected changed file: %s", filename)
                }
                break
            }
        }
    }
})

if err != nil {
    log.error("Failed to analyze ZIP differences: %v", err)
    die(sprintf("Failed to analyze ZIP differences: %v", err))
}

log.info("Script files: %d changed, %d added, %d deleted", len(changedScripts), len(addedScripts), len(deletedScripts))
log.info("Total diff files: %d", len(diffFiles))

// 生成差异ZIP文件
if len(diffFiles) > 0 {
    log.info("Creating diff ZIP with %d files...", len(diffFiles))
    
    try {
        diffZipBytes = zip.CompressRaw(diffFiles)~
        err = file.Save(outputPath, diffZipBytes)
        if err != nil {
            log.error("Failed to save diff ZIP: %v", err)
            die(sprintf("Failed to save diff ZIP to %s", outputPath))
        }
        
        log.info("Diff ZIP created successfully: %s (%d bytes)", outputPath, len(diffZipBytes))
    } catch compressErr {
        log.error("Failed to compress diff files: %v", compressErr)
        die(sprintf("Failed to create diff ZIP: %v", compressErr))
    }
} else {
    log.info("No changes detected, creating empty diff ZIP...")
    emptyZip = zip.CompressRaw({})~
    file.Save(outputPath, emptyZip)
}

// 生成Markdown报告
reportPath = str.Replace(outputPath, ".zip", ".md", 1)
report = sprintf("# AIKB ZIP 差异报告\n\n")
report += sprintf("**比较时间**: %s\n\n", time.Now().Format("2006-01-02 15:04:05"))
report += sprintf("**旧文件**: %s\n", oldZipPath)
report += sprintf("**新文件**: %s\n", newZipPath)
report += sprintf("**差异包**: %s\n\n", outputPath)

if len(changedScripts) > 0 {
    report += "## 如下文件发生变更（需要重构索引）：\n\n"
    for i, file := range changedScripts {
        report += sprintf("%d. %s\n", i+1, file)
    }
    report += "\n"
} else {
    report += "## 无脚本文件发生变更\n\n"
}

if len(addedScripts) > 0 {
    report += "## 新增脚本文件：\n\n"
    for i, file := range addedScripts {
        report += sprintf("%d. %s\n", i+1, file)
    }
    report += "\n"
} else {
    report += "## 无新增脚本文件\n\n"
}

if len(deletedScripts) > 0 {
    report += "## 删除的脚本文件：\n\n"
    for i, file := range deletedScripts {
        report += sprintf("%d. %s\n", i+1, file)
    }
    report += "\n"
}

// 添加所有变更文件的详细信息
if len(allDiffFiles) > 0 {
    report += "## 差异包包含的所有文件：\n\n"
    for i, file := range allDiffFiles {
        status := "新增"
        // 检查是否在变更的文件中
        for _, modifiedFile := range changeStats["modified"] {
            if modifiedFile == file {
                status = "变更"
                break
            }
        }
        report += sprintf("%d. %s (%s)\n", i+1, file, status)
    }
    report += "\n"
}

// 添加统计信息
report += "## 统计信息\n\n"
report += sprintf("- 总文件数（新ZIP）: %d\n", len(newFilesContent))
report += sprintf("- 变更的脚本文件: %d\n", len(changedScripts))
report += sprintf("- 新增的脚本文件: %d\n", len(addedScripts))
report += sprintf("- 删除的脚本文件: %d\n", len(deletedScripts))
report += sprintf("- 差异包文件总数: %d\n", len(diffFiles))

// 添加详细的变更统计
report += "\n## 详细变更统计\n\n"
report += sprintf("- 新增文件总数: %d\n", len(changeStats["added"]))
report += sprintf("- 修改文件总数: %d\n", len(changeStats["modified"]))
report += sprintf("- 删除文件总数: %d\n", len(changeStats["deleted"]))

if len(changeStats["added"]) > 0 {
    report += "\n### 新增文件列表：\n"
    for i, file := range changeStats["added"] {
        report += sprintf("%d. %s\n", i+1, file)
    }
}

if len(changeStats["modified"]) > 0 {
    report += "\n### 修改文件列表：\n"
    for i, file := range changeStats["modified"] {
        report += sprintf("%d. %s\n", i+1, file)
    }
}

if len(changeStats["deleted"]) > 0 {
    report += "\n### 删除文件列表：\n"
    for i, file := range changeStats["deleted"] {
        report += sprintf("%d. %s\n", i+1, file)
    }
}

// 保存报告
err = file.Save(reportPath, report)
if err != nil {
    log.error("Failed to write report: %v", err)
    die(sprintf("Failed to write report to %s", reportPath))
}

log.info("Report generated successfully: %s", reportPath)

// 打印报告到控制台
println(report)

// 输出处理结果摘要
if len(changedScripts) > 0 || len(addedScripts) > 0 {
    log.info("Changes detected: %d changed scripts, %d added scripts", len(changedScripts), len(addedScripts))
    log.info("Diff ZIP created: %s", outputPath)
    log.info("Report created: %s", reportPath)
} else {
    log.info("No script changes detected")
    log.info("Empty diff ZIP created: %s", outputPath)
    log.info("Report created: %s", reportPath)
}

// 总是返回成功退出码，避免CI失败
// CI可以通过检查生成的文件来判断是否有变更
log.info("Script execution completed successfully")
os.Exit(0)
