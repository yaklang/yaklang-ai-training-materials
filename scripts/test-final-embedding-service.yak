// =============================================================================
// Final Embedding Service Test - 完整流程测试
// 功能: 测试 embedding 服务的完整流程（启动服务、客户端连接、数据交换）
// 用途: 验证整个 embedding TOTP 服务的端到端功能
//
// 测试步骤:
// 1. 初始化 RAG 系统
// 2. 启动 embedding TOTP 服务
// 3. 模拟客户端连接并发送请求
// 4. 验证响应正确性
//
// 使用示例:
// yak scripts/test-final-embedding-service.yak
// =============================================================================

println("=== Final Embedding Service Test ===\n")

// 测试配置
testPort = 19099
totpSecret = "final-test-secret"
concurrent = 5

log.info("Test Configuration:")
log.info("  Port: %d", testPort)
log.info("  TOTP Secret: %s", totpSecret)
log.info("  Concurrent: %d", concurrent)

// =============================================================================
// Step 1: Initialize RAG System
// =============================================================================

println("\n=== Step 1: Initialize RAG System ===")

ragSystem, err = rag.GetCollection("default")
if err != nil {
    log.error("Failed to get RAG collection: %v", err)
    die(f"Failed to get RAG collection: ${err}")
}

embedder = ragSystem.Embedder
if embedder == nil {
    die("Failed to get embedder from RAG system")
}

// 测试 embedder
testVectors, testErr = embedder.Embedding("test")
if testErr != nil {
    die(f"Embedder test failed: ${testErr}")
}

println(f"✓ RAG System ready (vector dimension: ${len(testVectors)})")

// =============================================================================
// Step 2: Start Embedding Service
// =============================================================================

println("\n=== Step 2: Start Embedding Service ===")

// 创建并发控制
swg = sync.NewSizedWaitGroup(concurrent)

// 启动服务
go fn {
    err = httpserver.Serve("127.0.0.1", testPort, httpserver.handler((rsp, req) => {
        log.info("Service - Received: %s %s", req.Method, req.URL.Path)
        
        // 检查路径
        if req.URL.Path != "/embeddings" {
            rsp.WriteHeader(404)
            rsp.Write(b`{"error": {"message": "Not Found"}}`)
            return
        }
        
        // 只接受 POST
        if req.Method != "POST" {
            rsp.WriteHeader(405)
            rsp.Write(b`{"error": {"message": "Method Not Allowed"}}`)
            return
        }
        
        // 验证 TOTP
        totpCode = req.Header.Get("X-TOTP-Code")
        if totpCode == "" {
            log.warn("Missing TOTP code")
            rsp.WriteHeader(401)
            rsp.Write(b`{"error": {"message": "Missing X-TOTP-Code header"}}`)
            return
        }
        
        if !twofa.VerifyUTCCode(totpSecret, totpCode) {
            log.warn("Invalid TOTP code: %s", totpCode)
            rsp.WriteHeader(401)
            rsp.Write(b`{"error": {"message": "Invalid TOTP code"}}`)
            return
        }
        
        log.info("TOTP verified")
        
        // 读取请求
        body, readErr = io.ReadAll(req.Body)
        if readErr != nil {
            rsp.WriteHeader(400)
            rsp.Write(b`{"error": {"message": "Failed to read request"}}`)
            return
        }
        
        // 解析请求
        requestData = json.loads(body)
        inputText = requestData["input"]
        
        if inputText == "" {
            rsp.WriteHeader(400)
            rsp.Write(b`{"error": {"message": "Empty input"}}`)
            return
        }
        
        log.info("Processing: %s", inputText)
        
        // 并发控制
        swg.Add()
        log.info("Calling embedder...")
        vectors, embErr = embedder.Embedding(inputText)
        swg.Done()
        
        if embErr != nil {
            log.error("Embedding failed: %v", embErr)
            rsp.WriteHeader(500)
            rsp.Write(b`{"error": {"message": "Embedding failed"}}`)
            return
        }
        
        log.info("Generated embedding (dimension: %d)", len(vectors))
        
        // 构建响应
        responseData = {
            "object": "list",
            "data": [
                {
                    "object": "embedding",
                    "embedding": vectors,
                    "index": 0,
                }
            ],
            "model": "embedding",
            "usage": {
                "prompt_tokens": len(inputText),
                "total_tokens": len(inputText),
            }
        }
        
        rsp.Header().Set("Content-Type", "application/json")
        rsp.WriteHeader(200)
        responseJSON = json.dumps(responseData)
        rsp.Write(responseJSON)
        
        log.info("Request completed")
    }))
    
    if err != nil {
        log.error("Server failed: %v", err)
    }
}

sleep(2)
println(f"✓ Service started on http://127.0.0.1:${testPort}")

// =============================================================================
// Step 3: Test Client Connection
// =============================================================================

println("\n=== Step 3: Test Client Connection ===")

// 生成 TOTP
totpCode = twofa.GetUTCCode(totpSecret)
println(f"✓ TOTP Code: ${totpCode}")

println("\n测试 3 个请求:")

// 测试请求 1
text = "Hello, World!"
requestData = json.dumps({"input": text})
rsp, _, err = poc.HTTP(f`POST /embeddings HTTP/1.1
Host: 127.0.0.1
Content-Type: application/json
X-TOTP-Code: ${totpCode}
Content-Length: ${len(requestData)}

${requestData}`, poc.host("127.0.0.1"), poc.port(testPort), poc.timeout(10))

if err == nil {
    statusCode = poc.GetStatusCodeFromResponse(rsp)
    _, body = poc.Split(rsp)
    if statusCode == 200 {
        responseData = json.loads(body)
        embedding = responseData["data"][0]["embedding"]
        println(f"✓ 请求 1: 成功 (文本: ${text}, 维度: ${len(embedding)})")
    } else {
        println(f"✗ 请求 1: 失败 (状态码: ${statusCode})")
    }
} else {
    println(f"✗ 请求 1 失败: ${err}")
}

sleep(0.2)

// 测试请求 2
text = "This is a test for embedding service."
requestData = json.dumps({"input": text})
rsp, _, err = poc.HTTP(f`POST /embeddings HTTP/1.1
Host: 127.0.0.1
Content-Type: application/json
X-TOTP-Code: ${totpCode}
Content-Length: ${len(requestData)}

${requestData}`, poc.host("127.0.0.1"), poc.port(testPort), poc.timeout(10))

if err == nil {
    statusCode = poc.GetStatusCodeFromResponse(rsp)
    _, body = poc.Split(rsp)
    if statusCode == 200 {
        responseData = json.loads(body)
        embedding = responseData["data"][0]["embedding"]
        println(f"✓ 请求 2: 成功 (文本: ${text}, 维度: ${len(embedding)})")
    } else {
        println(f"✗ 请求 2: 失败 (状态码: ${statusCode})")
    }
} else {
    println(f"✗ 请求 2 失败: ${err}")
}

sleep(0.2)

// 测试请求 3
text = "Yaklang is awesome!"
requestData = json.dumps({"input": text})
rsp, _, err = poc.HTTP(f`POST /embeddings HTTP/1.1
Host: 127.0.0.1
Content-Type: application/json
X-TOTP-Code: ${totpCode}
Content-Length: ${len(requestData)}

${requestData}`, poc.host("127.0.0.1"), poc.port(testPort), poc.timeout(10))

if err == nil {
    statusCode = poc.GetStatusCodeFromResponse(rsp)
    _, body = poc.Split(rsp)
    if statusCode == 200 {
        responseData = json.loads(body)
        embedding = responseData["data"][0]["embedding"]
        println(f"✓ 请求 3: 成功 (文本: ${text}, 维度: ${len(embedding)})")
    } else {
        println(f"✗ 请求 3: 失败 (状态码: ${statusCode})")
    }
} else {
    println(f"✗ 请求 3 失败: ${err}")
}

// =============================================================================
// Step 4: Test Concurrent Requests
// =============================================================================

println("\n=== Step 4: Test Concurrent Requests ===")

println(f"测试并发限制 (concurrent=${concurrent})...")

// 创建多个并发请求
concurrentCount = concurrent + 3  // 超过并发限制
successCount = 0

wg = sync.NewWaitGroup()

for i = 0; i < concurrentCount; i++ {
    wg.Add(1)
    go fn(index) {
        defer wg.Done()
        
        // 生成当前 TOTP
        currentTOTP = twofa.GetUTCCode(totpSecret)
        
        text = f"Concurrent test ${index}"
        requestData = json.dumps({"input": text})
        
        rsp, _, err = poc.HTTP(f`POST /embeddings HTTP/1.1
Host: 127.0.0.1
Content-Type: application/json
X-TOTP-Code: ${currentTOTP}
Content-Length: ${len(requestData)}

${requestData}`, poc.host("127.0.0.1"), poc.port(testPort), poc.timeout(15))
        
        if err == nil {
            statusCode = poc.GetStatusCodeFromResponse(rsp)
            if statusCode == 200 {
                successCount++
                log.info("Concurrent request %d succeeded", index)
            }
        }
    }(i)
    
    // 稍微延迟，避免同时发送
    sleep(0.05)
}

wg.Wait()

println(f"✓ 并发请求完成: ${successCount}/${concurrentCount} 成功")

// =============================================================================
// Test Summary
// =============================================================================

println("\n=== Test Summary ===")
println("✓ RAG 系统初始化成功")
println("✓ Embedding 服务启动成功")
println("✓ TOTP 验证工作正常")
println("✓ 单个请求处理正确")
println("✓ 并发控制工作正常")
println("\n所有测试通过！服务可以正常使用。")

log.info("All tests passed successfully")

