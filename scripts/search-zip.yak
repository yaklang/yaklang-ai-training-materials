// =============================================================================
// ZIP 文档搜索工具 - 搜索和验证压缩的训练材料
// ZIP搜索 文档查询 内容检索 知识库搜索
// 关键词: zip.GrepRegexp, zip.GrepSubString, zip.ExtractByPattern, 文档搜索, 内容检索
// =============================================================================

println("ZIP 文档搜索工具启动...")

// =============================================================================
// 1. 配置和初始化
// 配置参数 ZIP路径 搜索配置
// 关键词: 配置, ZIP路径, 搜索参数, 初始化
// =============================================================================

// ZIP 文件路径
// 关键词: ZIP路径, 文件路径, 输入文件, 压缩包位置
zip_file = "/tmp/test.zip"
log.info("Target ZIP file: %s", zip_file)

// 验证 ZIP 文件是否存在
// 关键词: 文件验证, 存在性检查, 路径验证, 文件检查
if !file.IsFile(zip_file) {
    log.error("ZIP file not found: %s", zip_file)
    println(f"错误: ZIP 文件不存在: ${zip_file}")
    println("请先运行 merge-in-one-text.yak 创建 ZIP 文件")
    assert false, f"ZIP 文件不存在: ${zip_file}"
}

zip_size = len(file.ReadFile(zip_file)~)
log.info("ZIP file found, size: %d bytes", zip_size)
println(f"找到 ZIP 文件: ${zip_file}")
println(f"文件大小: ${zip_size} 字节\n")

// =============================================================================
// 2. ZIP 文件基本信息统计
// ZIP统计 文件列表 基本信息 内容概览
// 关键词: zip.Recursive, ZIP遍历, 文件统计, 内容概览
// =============================================================================

println("=== ZIP 文件内容概览 ===\n")

// 收集 ZIP 文件的统计信息
// 关键词: 文件统计, 信息收集, ZIP内容, 统计数据
total_files = 0
total_dirs = 0
total_content_size = 0
file_by_extension = {}
file_by_folder = {}
all_files = []

log.info("Scanning ZIP file contents...")

// 遍历 ZIP 文件统计信息
// 关键词: ZIP遍历, Recursive, 文件扫描, 内容分析
err = zip.Recursive(zip_file, func(isDir, pathName, info) {
    if isDir {
        total_dirs++
        log.info("Directory: %s", pathName)
    } else {
        total_files++
        total_content_size += int(info.Size())
        all_files = append(all_files, pathName)
        
        // 统计扩展名分布
        // 关键词: 扩展名统计, 文件类型, 类型分布, 格式统计
        ext = file.GetExt(pathName)
        if ext == "" {
            ext = "(无扩展名)"
        }
        if file_by_extension[ext] == nil {
            file_by_extension[ext] = 0
        }
        file_by_extension[ext] = file_by_extension[ext] + 1
        
        // 统计文件夹分布
        // 关键词: 文件夹统计, 目录分布, 路径分析, 文件夹分类
        parts = str.Split(pathName, "/")
        if len(parts) > 0 {
            folder = parts[0]
            if file_by_folder[folder] == nil {
                file_by_folder[folder] = 0
            }
            file_by_folder[folder] = file_by_folder[folder] + 1
        }
        
        log.info("File: %s (%d bytes)", pathName, info.Size())
    }
})

// 验证遍历结果
// 关键词: 结果验证, 遍历检查, 错误处理, 验证断言
if err != nil {
    log.error("Failed to scan ZIP file: %v", err)
    assert false, f"ZIP 文件扫描失败: ${err}"
}

// 显示统计信息
// 关键词: 统计显示, 信息输出, 数据汇总, 结果展示
println("基本统计:")
println(f"  文件总数: ${total_files}")
println(f"  目录总数: ${total_dirs}")
println(f"  内容总大小: ${total_content_size} 字节")

println("\n文件类型分布:")
for ext, count in file_by_extension {
    println(f"  ${ext}: ${count} 个文件")
}

println("\n文件夹分布:")
for folder, count in file_by_folder {
    println(f"  ${folder}: ${count} 个文件")
}

// 验证基本统计
// 关键词: 统计验证, 数据检查, 断言验证, 完整性检查
assert total_files > 0, "ZIP 文件应该包含文件"
assert total_content_size > 0, "文件内容总大小应该大于0"

// =============================================================================
// 3. 功能演示: 正则表达式搜索
// 正则搜索 模式匹配 代码搜索 函数查找
// 关键词: zip.GrepRegexp, 正则表达式, 模式搜索, 代码查找
// =============================================================================

println("\n=== 功能演示 1: 正则表达式搜索 ===\n")

// 示例 1: 搜索函数定义
// 关键词: 函数搜索, func定义, 代码搜索, 函数定位
println("示例 1: 搜索所有函数定义 (func 关键字)")
try {
    results = zip.GrepRegexp(zip_file, `func\s+\w+`, zip.grepLimit(10))~
    println(f"找到 ${len(results)} 个函数定义 (限制显示前 10 个):")
    for result in results {
        println(f"  ${result.FileName}:${result.LineNumber} - ${str.TrimSpace(result.Line)}")
    }
    println("")
} catch err {
    log.error("Function search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// 示例 2: 搜索 HTTP 相关代码
// 关键词: HTTP搜索, 网络代码, HTTP函数, 请求搜索
println("示例 2: 搜索 HTTP 相关代码")
try {
    results = zip.GrepRegexp(zip_file, `(?i)http\.(get|post|do)`, zip.grepLimit(10))~
    println(f"找到 ${len(results)} 个 HTTP 调用 (限制显示前 10 个):")
    for result in results {
        println(f"  ${result.FileName}:${result.LineNumber} - ${str.TrimSpace(result.Line)}")
    }
    println("")
} catch err {
    log.error("HTTP search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// 示例 3: 搜索 TODO 注释并显示上下文
// 关键词: TODO搜索, 注释查找, 上下文显示, 任务标记
println("示例 3: 搜索 TODO 注释 (带上下文)")
try {
    results = zip.GrepRegexp(zip_file, `(?i)TODO|FIXME`, zip.grepContextLine(2), zip.grepLimit(5))~
    println(f"找到 ${len(results)} 个 TODO/FIXME 标记 (限制显示前 5 个):")
    for result in results {
        println(f"\n文件: ${result.FileName}, 行: ${result.LineNumber}")
        
        // 显示上下文
        // 关键词: 上下文显示, 前后文, 代码上下文, 内容关联
        if len(result.ContextBefore) > 0 {
            for line in result.ContextBefore {
                println(f"  -   ${line}")
            }
        }
        println(f"  >>> ${result.Line}")
        if len(result.ContextAfter) > 0 {
            for line in result.ContextAfter {
                println(f"  -   ${line}")
            }
        }
    }
    println("")
} catch err {
    log.error("TODO search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// =============================================================================
// 4. 功能演示: 子字符串搜索
// 子串搜索 关键词查找 文本搜索 快速定位
// 关键词: zip.GrepSubString, 子串搜索, 关键词, 文本定位
// =============================================================================

println("\n=== 功能演示 2: 子字符串搜索 ===\n")

// 示例 4: 搜索 "assert" 关键词
// 关键词: assert搜索, 断言查找, 验证代码, 测试代码
println("示例 4: 搜索 'assert' 关键词")
try {
    results = zip.GrepSubString(zip_file, "assert", zip.grepLimit(10))~
    println(f"找到 ${len(results)} 个 assert 语句 (限制显示前 10 个):")
    for result in results {
        println(f"  ${result.FileName}:${result.LineNumber} - ${str.TrimSpace(result.Line)}")
    }
    println("")
} catch err {
    log.error("Assert search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// 示例 5: 搜索 "poc" 相关内容
// 关键词: POC搜索, 安全测试, POC代码, 漏洞验证
println("示例 5: 搜索 'poc' 相关内容")
try {
    results = zip.GrepSubString(zip_file, "poc", zip.grepLimit(10))~
    println(f"找到 ${len(results)} 个 POC 相关行 (限制显示前 10 个):")
    for result in results {
        println(f"  ${result.FileName}:${result.LineNumber} - ${str.TrimSpace(result.Line)}")
    }
    println("")
} catch err {
    log.error("POC search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// =============================================================================
// 5. 功能演示: 文件提取
// 文件提取 内容读取 精准提取 文件获取
// 关键词: zip.ExtractFile, zip.ExtractByPattern, 文件提取, 内容获取
// =============================================================================

println("\n=== 功能演示 3: 文件提取 ===\n")

// 示例 6: 提取所有 README 文件
// 关键词: README提取, 文档提取, 说明文件, 文档读取
println("示例 6: 提取所有 README 和 MD 文件")
try {
    results = zip.ExtractByPattern(zip_file, "*.md")~
    println(f"找到 ${len(results)} 个 .md 文件")
    
    // 显示文件列表和大小
    // 关键词: 文件列表, 文件信息, 大小统计, 提取结果
    count = 0
    for result in results {
        if result.Error == nil {
            count++
            println(f"  ${result.FileName}: ${len(result.Content)} 字节")
            if count >= 10 {
                println(f"  ... (还有 ${len(results) - count} 个文件)")
                break
            }
        } else {
            log.error("Extract failed for %s: %v", result.FileName, result.Error)
        }
    }
    println("")
} catch err {
    log.error("Pattern extract failed: %v", err)
    println(f"提取失败: ${err}\n")
}

// 示例 7: 提取特定文件夹的文件
// 关键词: 文件夹提取, 目录提取, 批量提取, 路径匹配
println("示例 7: 提取 practice 文件夹下的所有文件")
try {
    results = zip.ExtractByPattern(zip_file, "practice/*")~
    println(f"找到 ${len(results)} 个文件")
    for result in results {
        if result.Error == nil {
            println(f"  ${result.FileName}: ${len(result.Content)} 字节")
        }
    }
    println("")
} catch err {
    log.error("Folder extract failed: %v", err)
    println(f"提取失败: ${err}\n")
}

// =============================================================================
// 6. 实战演示: 知识库搜索场景
// 知识搜索 实战场景 智能检索 文档查询
// 关键词: 知识库搜索, 实战应用, 智能检索, 文档查询
// =============================================================================

println("\n=== 实战场景: 知识库智能搜索 ===\n")

// 场景 1: 查找某个库的使用示例
// 关键词: 库搜索, 使用示例, 代码示例, 函数用法
println("场景 1: 查找 zip 库的使用示例")
try {
    // 搜索 zip 库相关的函数调用
    // 关键词: zip库, 函数调用, 使用案例, API搜索
    results = zip.GrepRegexp(zip_file, `zip\.\w+\(`, zip.grepLimit(15), zip.grepContextLine(1))~
    println(f"找到 ${len(results)} 个 zip 库函数调用 (显示前 15 个):")
    
    // 统计不同的函数
    // 关键词: 函数统计, API统计, 使用频率, 函数分布
    function_count = {}
    for result in results {
        // 提取函数名 - 使用简单的字符串解析
        line = result.Line
        if str.Contains(line, "zip.") {
            parts = str.Split(line, "zip.")
            if len(parts) > 1 {
                func_part = parts[1]
                // 提取函数名（到括号为止）
                if str.Contains(func_part, "(") {
                    func_name = str.Split(func_part, "(")[0]
                    if function_count[func_name] == nil {
                        function_count[func_name] = 0
                    }
                    function_count[func_name] = function_count[func_name] + 1
                }
            }
        }
    }
    
    println("\nzip 库函数使用统计:")
    for func_name, count in function_count {
        println(f"  zip.${func_name}: ${count} 次")
    }
    println("")
} catch err {
    log.error("Library search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// 场景 2: 错误处理模式搜索
// 关键词: 错误处理, try-catch, 异常处理, 错误模式
println("场景 2: 查找错误处理的最佳实践")
try {
    // 搜索 try-catch 模式
    // 关键词: try-catch, 错误处理, 异常捕获, 错误管理
    results = zip.GrepRegexp(zip_file, `try\s*{`, zip.grepLimit(10), zip.grepContextLine(3))~
    println(f"找到 ${len(results)} 个 try-catch 错误处理示例 (显示前 10 个):")
    
    count = 0
    for result in results {
        if count >= 5 {  // 只显示前5个详细信息
            println(f"  ... (还有 ${len(results) - count} 个示例)")
            break
        }
        count++
        
        println(f"\n示例 ${count}: ${result.FileName}:${result.LineNumber}")
        if len(result.ContextBefore) > 0 {
            for line in result.ContextBefore {
                println(f"  ${line}")
            }
        }
        println(f"  >>> ${result.Line}")
        if len(result.ContextAfter) > 0 {
            for line in result.ContextAfter {
                println(f"  ${line}")
            }
        }
    }
    println("")
} catch err {
    log.error("Error handling search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// 场景 3: 查找特定主题的文档
// 关键词: 主题搜索, 文档查找, 主题定位, 知识查询
println("场景 3: 查找并发编程相关的文档")
try {
    // 搜索并发相关的关键词
    // 关键词: 并发, goroutine, channel, 多线程
    keywords = ["goroutine", "channel", "并发", "concurrent"]
    topic_files = {}
    
    for keyword in keywords {
        results = zip.GrepSubString(zip_file, keyword, zip.grepLimit(20))~
        log.info("Keyword '%s' found in %d locations", keyword, len(results))
        
        for result in results {
            if topic_files[result.FileName] == nil {
                topic_files[result.FileName] = 0
            }
            topic_files[result.FileName] = topic_files[result.FileName] + 1
        }
    }
    
    println(f"找到 ${len(topic_files)} 个包含并发主题的文件:")
    for file_name, count in topic_files {
        println(f"  ${file_name}: ${count} 处匹配")
    }
    println("")
} catch err {
    log.error("Topic search failed: %v", err)
    println(f"搜索失败: ${err}\n")
}

// =============================================================================
// 7. 性能测试和压力测试
// 性能测试 压力测试 搜索性能 提取性能
// 关键词: 性能测试, 压力测试, 响应时间, 效率测试
// =============================================================================

println("\n=== 性能测试 ===\n")

// 测试大量正则搜索的性能
// 关键词: 搜索性能, 正则性能, 响应时间, 效率测试
println("性能测试: 批量正则搜索")
test_patterns = [
    `func\s+\w+`,
    `import\s+`,
    `println`,
    `\berr\b`,
    `assert\s+`,
]

start_time = time.Now()
total_matches = 0

for pattern in test_patterns {
    try {
        results = zip.GrepRegexp(zip_file, pattern, zip.grepLimit(100))~
        total_matches += len(results)
        log.info("Pattern '%s' matched %d times", pattern, len(results))
    } catch err {
        log.error("Pattern search failed: %v", err)
    }
}

end_time = time.Now()
duration = end_time.Sub(start_time)

println(f"批量搜索性能:")
println(f"  搜索模式数: ${len(test_patterns)}")
println(f"  总匹配数: ${total_matches}")
println(f"  总耗时: ${duration}")
println(f"  平均每个模式: ${duration.Milliseconds() / int64(len(test_patterns))} ms")

// 测试批量文件提取的性能
// 关键词: 提取性能, 批量提取, 并发性能, 效率测试
println("\n性能测试: 批量文件提取")

start_time = time.Now()

try {
    yak_files = zip.ExtractByPattern(zip_file, "*.yak")~
    md_files = zip.ExtractByPattern(zip_file, "*.md")~
    
    end_time = time.Now()
    duration = end_time.Sub(start_time)
    
    total_extracted = len(yak_files) + len(md_files)
    total_bytes = 0
    
    for result in yak_files {
        if result.Error == nil {
            total_bytes += len(result.Content)
        }
    }
    for result in md_files {
        if result.Error == nil {
            total_bytes += len(result.Content)
        }
    }
    
    println(f"批量提取性能:")
    println(f"  提取文件数: ${total_extracted}")
    println(f"  提取数据量: ${total_bytes} 字节")
    println(f"  总耗时: ${duration}")
    if total_extracted > 0 {
        println(f"  平均每个文件: ${duration.Milliseconds() / int64(total_extracted)} ms")
    }
} catch err {
    log.error("Batch extract failed: %v", err)
    println(f"批量提取失败: ${err}")
}

// =============================================================================
// 8. 验证和完整性检查
// 完整性验证 数据验证 内容检查 质量保证
// 关键词: 完整性检查, 数据验证, 质量保证, 内容验证
// =============================================================================

println("\n=== 完整性验证 ===\n")

// 验证 1: 检查是否包含必要的文件夹
// 关键词: 文件夹验证, 目录检查, 结构验证, 完整性
required_folders = ["awesome-scripts", "basic-syntax", "library-usage", "practice"]
println("验证必要的文件夹:")
for folder in required_folders {
    found = false
    for file_name in all_files {
        if str.HasPrefix(file_name, folder + "/") {
            found = true
            break
        }
    }
    if found {
        println(f"  ✓ ${folder}")
        assert true, f"文件夹 ${folder} 应该存在"
    } else {
        println(f"  ✗ ${folder} (未找到)")
        log.warn("Required folder not found: %s", folder)
    }
}

// 验证 2: 检查文件类型分布
// 关键词: 文件类型验证, 格式检查, 类型分布, 格式验证
println("\n验证文件类型:")
required_extensions = [".md", ".mdx", ".yak"]
for ext in required_extensions {
    count = file_by_extension[ext]
    if count != nil && count > 0 {
        println(f"  ✓ ${ext}: ${count} 个文件")
        assert count > 0, f"应该包含 ${ext} 文件"
    } else {
        println(f"  ✗ ${ext}: 未找到")
        log.warn("No files with extension: %s", ext)
    }
}

// 验证 3: 随机抽取文件验证内容
// 关键词: 内容验证, 随机抽取, 质量检查, 数据验证
println("\n随机抽取文件验证内容:")
if len(all_files) > 0 {
    // 随机选择几个文件进行验证
    // 关键词: 随机选择, 文件抽样, 内容检查, 质量验证
    sample_count = min(5, len(all_files))
    for i in sample_count {
        file_index = i * (len(all_files) / sample_count)
        if file_index >= len(all_files) {
            file_index = len(all_files) - 1
        }
        
        file_name = all_files[file_index]
        try {
            content = zip.ExtractFile(zip_file, file_name)~
            content_size = len(content)
            println(f"  ✓ ${file_name}: ${content_size} 字节")
            assert content_size > 0, f"文件 ${file_name} 内容不应为空"
        } catch err {
            println(f"  ✗ ${file_name}: 提取失败 - ${err}")
            log.error("Failed to extract sample file %s: %v", file_name, err)
        }
    }
}

// =============================================================================
// 9. 最终总结
// 任务总结 验证报告 测试完成
// 关键词: 任务总结, 验证报告, 测试完成, 最终报告
// =============================================================================

println("\n=== 验证完成总结 ===")
println(f"✓ ZIP 文件路径: ${zip_file}")
println(f"✓ 文件总数: ${total_files}")
println(f"✓ 目录总数: ${total_dirs}")
println(f"✓ 内容总大小: ${total_content_size} 字节")
println(f"✓ 支持的搜索功能:")
println(f"    - 正则表达式搜索 (GrepRegexp)")
println(f"    - 子字符串搜索 (GrepSubString)")
println(f"    - 模式匹配提取 (ExtractByPattern)")
println(f"    - 单文件提取 (ExtractFile)")
println(f"    - 批量文件提取 (ExtractFiles)")
println(f"✓ 所有核心功能验证通过")

log.info("ZIP document search verification completed successfully")
println("\nZIP 文档搜索工具验证完成!")

