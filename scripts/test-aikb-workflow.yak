// =============================================================================
// AIKB Workflow 本地测试脚本
// =============================================================================
// 本脚本模拟 GitHub Actions 的完整流程，用于本地测试和调试
// 关键词: 测试脚本, workflow测试, 本地验证, AIKB测试
// =============================================================================

println("=" * 80)
println("AIKB Workflow 本地测试")
println("=" * 80)

// =============================================================================
// 1. 环境检查
// =============================================================================
println("\n[1/6] 检查环境...")

// 检查是否在项目根目录
projectRoot = os.Getwd()~
yaklangAiMaterialsDir = file.Join(projectRoot, "awesome-scripts")
if !file.IsDir(yaklangAiMaterialsDir) {
    die("错误：请在 yaklang-ai-training-materials 项目根目录下运行此脚本")
}

println(sprintf("✓ 项目根目录: %v", projectRoot))

// 检查必要的文件夹
requiredFolders = [
    "awesome-scripts",
    "basic-syntax",
    "library-usage",
    "practice",
    "scripts",
]

for folder in requiredFolders {
    folderPath = file.Join(projectRoot, folder)
    if !file.IsDir(folderPath) {
        yakit.Warn(sprintf("警告：文件夹不存在: %v", folder))
    } else {
        println(sprintf("✓ 文件夹存在: %v", folder))
    }
}

// 检查 merge-in-one-text.yak
mergeScript = file.Join(projectRoot, "scripts", "merge-in-one-text.yak")
if !file.IsExisted(mergeScript) {
    die(sprintf("错误：找不到 merge-in-one-text.yak: %v", mergeScript))
}
println(sprintf("✓ merge-in-one-text.yak 存在"))

println("\n✓ 环境检查完成")

// =============================================================================
// 2. 检查 yak 引擎
// =============================================================================
println("\n[2/6] 检查 yak 引擎...")

// 尝试使用当前的 yak
yakVersion, err = exec.System("yak version 2>&1")
if err != nil {
    yakit.Warn("无法获取 yak 版本信息")
    yakit.Info("请确保已安装 yaklang 引擎")
    yakit.Info("下载地址: https://github.com/yaklang/yaklang/releases")
} else {
    yakit.Info(sprintf("当前 yak 版本:\n%v", string(yakVersion)))
}

println("\n✓ yak 引擎检查完成")

// =============================================================================
// 3. 生成 AIKB ZIP
// =============================================================================
println("\n[3/6] 生成 AIKB ZIP 文件...")

testOutputZip = file.Join(projectRoot, "yaklang-aikb-test.zip")

// 删除旧的测试文件
if file.IsExisted(testOutputZip) {
    yakit.Info("删除旧的测试文件...")
    os.RemoveAll(testOutputZip)
}

// 运行 merge-in-one-text.yak
yakit.Info("运行 merge-in-one-text.yak...")
startTime = time.Now()

result, err = exec.System(sprintf("yak %v --output %v 2>&1", mergeScript, testOutputZip))
if err != nil {
    yakit.Error(sprintf("生成 ZIP 失败: %v", err))
    yakit.Error(sprintf("输出:\n%v", string(result)))
    die("ZIP 生成失败")
}

duration = time.Since(startTime)
yakit.Success(sprintf("ZIP 生成耗时: %v", duration))

// 验证生成的文件
if !file.IsExisted(testOutputZip) {
    yakit.Error("ZIP 文件未生成")
    yakit.Error(sprintf("输出:\n%v", string(result)))
    die("ZIP 文件不存在")
}

zipSize = len(file.ReadFile(testOutputZip)~)
yakit.Success(sprintf("ZIP 文件大小: %v bytes (%.2f MB)", zipSize, float(zipSize)/1024/1024))

// 验证 ZIP 内容
yakit.Info("验证 ZIP 内容...")
zipListResult, err = exec.System(sprintf("unzip -l %v 2>&1 | head -30", testOutputZip))
if err == nil {
    yakit.Info(sprintf("ZIP 内容预览:\n%v", string(zipListResult)))
}

// 统计文件数
fileCountResult, _ = exec.System(sprintf("unzip -l %v 2>&1 | tail -1", testOutputZip))
yakit.Info(sprintf("ZIP 统计:\n%v", string(fileCountResult)))

println("\n✓ AIKB ZIP 生成成功")

// =============================================================================
// 4. 创建时间戳文件
// =============================================================================
println("\n[4/6] 创建时间戳文件...")

testTimestampFile = file.Join(projectRoot, "yaklang-aikb-test.updated_at.txt")

uploadTime = time.Now().Format("2006-01-02 15:04:05 MST")
timestampContent = sprintf(`Upload Time: %v
Environment: Local Test
Project Root: %v
ZIP Size: %v bytes
Generated By: test-aikb-workflow.yak
`, uploadTime, projectRoot, zipSize)

file.Save(testTimestampFile, timestampContent)~
yakit.Success("时间戳文件已创建")
yakit.Info(sprintf("内容:\n%v", timestampContent))

println("\n✓ 时间戳文件创建成功")

// =============================================================================
// 5. 验证文件完整性
// =============================================================================
println("\n[5/6] 验证文件完整性...")

// 尝试解压缩验证
tmpExtractDir = file.Join(os.TempDir(), sprintf("aikb-test-%v", str.RandStr(8)))
file.MkdirAll(tmpExtractDir)~

yakit.Info(sprintf("解压到临时目录: %v", tmpExtractDir))
extractResult, err = exec.System(sprintf("unzip -q %v -d %v 2>&1", testOutputZip, tmpExtractDir))
if err != nil {
    yakit.Warn(sprintf("解压警告: %v", err))
    yakit.Warn(sprintf("输出: %v", string(extractResult)))
} else {
    yakit.Success("ZIP 文件可以正常解压")
}

// 统计解压后的文件
extractedFileCount = 0
filesys.Recursive(tmpExtractDir,
    filesys.onFileStat((path, info) => {
        extractedFileCount++
        return nil
    })
)

yakit.Info(sprintf("解压后文件数: %v", extractedFileCount))

// 清理临时目录
os.RemoveAll(tmpExtractDir)

println("\n✓ 文件完整性验证通过")

// =============================================================================
// 6. 模拟 OSS 验证（HEAD 请求）
// =============================================================================
println("\n[6/6] 模拟 OSS 验证...")

yakit.Info("注意：本地测试无法真正上传到 OSS")
yakit.Info("在实际 GitHub Actions 中，会执行以下操作：")
println("")
println("  1. 上传文件到 OSS:")
println("     yak upload-oss -b yaklang -f 'yaklang-aikb.zip:/ai-knowledge-base/yaklang-aikb.zip'")
println("")
println("  2. 验证上传结果:")
println("     curl -I https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.zip")
println("")

// 尝试检查当前线上的 AIKB
yakit.Info("检查当前线上的 AIKB 版本...")

ossZipUrl = "https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.zip"
ossTimestampUrl = "https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.updated_at.txt"

// 检查 ZIP
zipCheckResult, _ = exec.System(sprintf("curl -I -s '%v' 2>&1 | grep -E 'HTTP|Content-Length|Last-Modified'", ossZipUrl))
if len(zipCheckResult) > 0 {
    yakit.Info("线上 ZIP 信息:")
    println(string(zipCheckResult))
}

// 检查时间戳
timestampCheckResult, _ = exec.System(sprintf("curl -s '%v' 2>&1", ossTimestampUrl))
if len(timestampCheckResult) > 0 {
    yakit.Info("线上时间戳信息:")
    println(string(timestampCheckResult))
}

println("\n✓ OSS 验证检查完成")

// =============================================================================
// 测试总结
// =============================================================================
println("\n" + "=" * 80)
println("测试总结")
println("=" * 80)

println("\n✅ 本地测试完成！")
println("")
println("生成的测试文件:")
println(sprintf("  - ZIP: %v", testOutputZip))
println(sprintf("  - 时间戳: %v", testTimestampFile))
println("")
println("文件统计:")
println(sprintf("  - ZIP 大小: %.2f MB", float(zipSize)/1024/1024))
println(sprintf("  - 解压文件数: %v", extractedFileCount))
println("")
println("下一步:")
println("  1. 检查生成的 ZIP 文件内容是否正确")
println("  2. 如果一切正常，可以提交代码触发 GitHub Actions")
println("  3. 或者使用 'workflow_dispatch' 手动触发上传")
println("")
println("清理测试文件:")
println(sprintf("  rm %v", testOutputZip))
println(sprintf("  rm %v", testTimestampFile))
println("")

yakit.Success("所有测试步骤完成！")

