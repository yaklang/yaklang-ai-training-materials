// =============================================================================
// JWT令牌操作演示脚本 - JSON Web Token生成、解析和安全测试
// 功能: 演示JWT令牌的生成、解析、算法移除等安全测试操作
// 用途: JWT安全测试、令牌伪造、身份认证绕过、Web安全测试
//
// 核心技术栈:
// - jwt.JWTGenerateEx: 生成JWT令牌，支持自定义头部和载荷
// - jwt.Parse: 解析JWT令牌，验证签名和提取数据
// - jwt.RemoveAlg: 移除JWT算法字段，用于None算法攻击
// - jwt.ALG_HS256: HMAC SHA256签名算法
//
// 安全测试场景:
// 1. JWT令牌生成 - 创建合法的JWT令牌
// 2. 算法移除攻击 - 移除alg字段进行None算法攻击
// 3. JWT令牌解析 - 验证和解析JWT令牌内容
// 4. 密钥验证 - 确保密钥正确性
//
// 关键词: JWT令牌 JSON Web Token 身份认证 安全测试 令牌伪造 算法攻击
// 搜索标签: #jwt #json-web-token #authentication #security-test #token-forge
// =============================================================================

// ===== 1. JWT令牌生成 - 创建带自定义头部和载荷的JWT =====
// 关键词: JWT生成, JWTGenerateEx, HMAC SHA256, 自定义头部, 载荷数据

// 生成JWT令牌 - 使用HS256算法和自定义参数
// 关键词: jwt.JWTGenerateEx, jwt.ALG_HS256, JWT头部, JWT载荷, HMAC签名
// 参数说明:
// - jwt.ALG_HS256: 使用HMAC SHA256签名算法
// - {"kid": "admin"}: JWT头部，包含密钥ID标识
// - {"data": 111}: JWT载荷，包含业务数据
// - b"aa123456": 签名密钥，用于HMAC签名
a = jwt.JWTGenerateEx(jwt.ALG_HS256, {
    "kid": "admin"
}, {"data": 111}, b"aa123456")

// 输出生成的JWT令牌信息
// 关键词: JWT输出, 令牌显示, 生成结果, dump输出
dump(a)

// ===== 2. JWT算法移除攻击 - None算法攻击测试 =====
// 关键词: 算法移除, None算法攻击, JWT安全漏洞, RemoveAlg

// 移除JWT算法字段 - 用于None算法攻击
// 关键词: jwt.RemoveAlg, None算法, 算法绕过, JWT安全测试
// 攻击原理: 移除alg字段或设置为none，绕过签名验证
dump(jwt.RemoveAlg(a[0]))

// ===== 3. JWT令牌解析和验证 - 解析JWT内容并验证签名 =====
// 关键词: JWT解析, jwt.Parse, 签名验证, 令牌验证, 数据提取

// 解析JWT令牌 - 验证签名并提取数据
// 关键词: jwt.Parse, JWT解析, 签名验证, 密钥验证, 令牌解码
// 参数说明:
// - a[0]: 生成的JWT令牌字符串
// - "aa123456": 验证密钥，必须与生成时的密钥一致
b, key = jwt.Parse(a[0], "aa123456")~

// 输出解析结果
// 关键词: 解析结果, JWT数据, 载荷内容, 解析输出
dump(b)

// ===== 4. 密钥验证 - 确保JWT密钥的正确性 =====
// 关键词: 密钥验证, 密钥检查, 安全验证, 密钥一致性

// 验证解析出的密钥是否正确
// 关键词: 密钥比对, 字符串转换, 安全检查, 密钥一致性验证
if string(key) != "aa123456" {
    // 密钥不匹配时触发异常
    // 关键词: 异常处理, panic, 密钥错误, 安全异常
    panic(111)
}