// =============================================================================
// Goroutine并发编程演示脚本 - 展示Yak语言的并发处理能力
// 功能: 演示goroutine的创建、同步和等待机制
// 用途: 并发编程、多线程处理、异步任务、性能优化、并行计算
//
// 核心技术栈:
// - sync.NewSizedWaitGroup: 创建有大小限制的等待组
// - go关键字: 启动goroutine协程
// - wg.Add: 增加等待计数器
// - wg.Done: 完成一个任务，减少计数器
// - wg.Wait: 等待所有任务完成
//
// 并发模式:
// 1. 创建有限制的等待组 - 控制并发数量
// 2. 定义工作函数 - 执行具体任务
// 3. 批量启动goroutine - 并行执行任务
// 4. 等待所有任务完成 - 同步机制
//
// 关键词: goroutine 并发编程 协程 同步机制 并行处理 多线程 异步任务
// 搜索标签: #goroutine #concurrency #parallel #sync #waitgroup #async
// =============================================================================

// ===== 1. 创建并发控制器 - 限制并发数量的等待组 =====
// 关键词: 并发控制, 等待组, 并发限制, sync.NewSizedWaitGroup

// 创建有大小限制的等待组 - 控制最大并发数为10
// 关键词: sync.NewSizedWaitGroup, 并发限制, 等待组, 并发控制器
// 参数说明: 10 表示最大并发数量，防止创建过多goroutine
wg = sync.NewSizedWaitGroup(10)

// ===== 2. 定义工作函数 - 具体的任务执行逻辑 =====
// 关键词: 工作函数, 任务逻辑, goroutine任务, 并发任务

// 工作函数 - 每个goroutine执行的具体任务
// 关键词: work函数, 任务执行, wg.Done, 任务完成通知
// 功能: 执行具体的工作逻辑，完成后通知等待组
func work() {
    // 任务完成后调用Done() - 减少等待计数器
    // 关键词: wg.Done, 任务完成, 计数器减少, 同步通知
    wg.Done()
}

// ===== 3. 批量启动goroutine - 并行执行多个任务 =====
// 关键词: 批量启动, goroutine创建, 并行执行, 任务分发

// 增加等待计数器 - 告诉等待组需要等待10个任务
// 关键词: wg.Add, 等待计数, 任务数量, 计数器增加
wg.Add(10)

// 循环启动10个goroutine - 并行执行工作任务
// 关键词: for循环, goroutine启动, go关键字, 并发创建
for i := 0; i < 10; i++ {
    // 启动goroutine执行work函数 - 异步并行执行
    // 关键词: go关键字, goroutine启动, 异步执行, 并行任务
    go work()
}

// ===== 4. 等待所有任务完成 - 同步等待机制 =====
// 关键词: 任务等待, 同步机制, 等待完成, 并发同步

// 等待所有goroutine完成 - 阻塞直到计数器归零
// 关键词: wg.Wait, 等待完成, 阻塞等待, 同步等待, 任务同步
wg.Wait()
