// =============================================================================
// Eval动态代码执行演示脚本 - 展示Yak语言的动态执行能力
// 功能: 演示eval函数的动态代码执行和作用域处理
// 用途: 动态编程、代码生成、脚本解释、表达式求值、动态执行
//
// 核心技术栈:
// - eval函数: 动态执行Yak代码字符串
// - 变量作用域: 全局和局部作用域的动态访问
// - 表达式求值: 动态计算和变量修改
// - 断言验证: 确保动态执行结果的正确性
//
// 执行模式:
// 1. 全局作用域动态执行 - 修改全局变量
// 2. 函数作用域动态执行 - 修改局部变量
// 3. 表达式求值验证 - 确保执行结果正确
//
// 关键词: eval函数 动态执行 代码生成 表达式求值 作用域 动态编程
// 搜索标签: #eval #dynamic-execution #code-generation #expression #scope
// =============================================================================

// ===== 1. 全局作用域动态执行 - 在全局环境中执行代码 =====
// 关键词: 全局作用域, 动态执行, eval函数, 全局变量, 代码字符串

// 定义全局变量 - 用于动态执行测试
// 关键词: 全局变量, 变量定义, 初始值, 测试变量
a = 1

// 动态执行代码字符串 - 修改全局变量的值
// 关键词: eval函数, 动态执行, 代码字符串, 变量递增, a++操作
// 功能: 执行"a++"代码，将全局变量a的值增加1
eval("a++")

// 验证动态执行结果 - 确保变量值正确修改
// 关键词: assert断言, 结果验证, 动态执行验证, 值检查
assert a == 2

// ===== 2. 函数作用域动态执行 - 在局部环境中执行代码 =====
// 关键词: 函数作用域, 局部变量, 动态执行, 作用域隔离

// 定义包含动态执行的函数 - 测试局部作用域
// 关键词: 函数定义, 局部作用域, 匿名函数, 作用域测试
b = func(){
    // 定义局部变量 - 仅在函数内部可见
    // 关键词: 局部变量, 函数内变量, 作用域限制, 变量隔离
    c = 1
    
    // 在函数作用域内动态执行代码 - 修改局部变量
    // 关键词: 局部eval, 函数内动态执行, 局部变量修改, c++操作
    // 功能: 在函数作用域内执行"c++"，修改局部变量c
    eval("c++")
    
    // 验证局部动态执行结果 - 确保局部变量正确修改
    // 关键词: 局部断言, 局部变量验证, 函数内验证, 作用域验证
    assert c == 2
}

// ===== 3. 执行函数测试 - 验证函数作用域的动态执行 =====
// 关键词: 函数调用, 作用域测试, 动态执行测试, 函数执行

// 调用包含动态执行的函数 - 测试局部作用域动态执行
// 关键词: 函数调用, b()调用, 局部作用域执行, 动态执行验证
b()
