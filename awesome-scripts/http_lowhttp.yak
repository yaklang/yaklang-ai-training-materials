// =============================================================================
// HTTPS服务器与客户端通信测试脚本 - 演示TLS证书生成和HTTPS通信
// 功能: 创建自签名HTTPS服务器，测试HTTP客户端与服务器的TLS通信
// 用途: HTTPS通信测试、TLS证书验证、HTTP客户端测试、安全通信验证
//
// 核心技术栈:
// - tls.GenerateRootCA: 生成根证书和私钥
// - tls.SignServerCertAndKey: 签发服务器证书
// - httpserver.Serve: 启动HTTPS服务器
// - http.NewRequest/http.Post: HTTP客户端请求
// - http.Do: 执行HTTP请求
//
// 测试流程:
// 1. 生成根证书和私钥
// 2. 签发服务器证书
// 3. 启动HTTPS服务器
// 4. 测试POST请求通信
//
// 关键词: HTTPS服务器 TLS证书 自签名证书 HTTP客户端 安全通信 证书验证
// 搜索标签: #https #tls #certificate #http-client #secure-communication #self-signed
// =============================================================================

// ===== 1. 生成TLS证书 - 创建根证书和服务器证书 =====
// 关键词: TLS证书生成, 根证书, 自签名证书, 证书链, CA证书

// 生成根证书和私钥 - 用于签发服务器证书
// 关键词: tls.GenerateRootCA, 根证书生成, CA证书, 根私钥, 证书颁发机构
ca, key = tls.GenerateRootCA("yaklang.io")~

// 签发服务器证书 - 使用根证书签发服务器证书
// 关键词: tls.SignServerCertAndKey, 服务器证书, 证书签发, 服务器私钥, 证书链
cert, sKey = tls.SignServerCertAndKey(ca, key)~

// ===== 2. 启动HTTPS服务器 - 创建TLS加密的HTTP服务器 =====
// 关键词: HTTPS服务器, TLS服务器, httpserver.Serve, 安全服务器

// 获取随机可用端口 - 避免端口冲突
// 关键词: os.GetRandomAvailableTCPPort, 随机端口, 端口分配, TCP端口
port = os.GetRandomAvailableTCPPort()

// 启动HTTPS服务器 - 使用goroutine异步启动
// 关键词: httpserver.Serve, HTTPS服务器启动, TLS配置, 异步服务器
go func {
  // 配置TLS证书和处理器
  // 关键词: httpserver.tlsCertAndKey, TLS证书配置, httpserver.handler, HTTP处理器
  httpserver.Serve("127.0.0.1", port, httpserver.tlsCertAndKey(cert, sKey), httpserver.handler(func(rsp, req) { rsp.WriteHeader(200); rsp.Write("Hello"); } ))~
}

// 等待服务器启动完成
// 关键词: time.Sleep, 服务器启动等待, 异步等待, 启动延迟
time.Sleep(1)

// ===== 3. 测试HTTP客户端通信 - 验证HTTPS通信功能 =====
// 关键词: HTTP客户端测试, HTTPS通信测试, TLS通信验证, 客户端请求

// 测试1: 使用http.NewRequest创建POST请求
// 关键词: http.NewRequest, POST请求创建, HTTP请求构建, 请求体设置
req = http.NewRequest("POST", f"https://127.0.0.1:${port}", http.body("aaa=bbb"))~

// 执行HTTP请求 - 发送HTTPS请求到服务器
// 关键词: http.Do, HTTP请求执行, HTTPS请求发送, TLS握手
rsp = http.Do(req)~

// 验证响应状态码 - 确保通信成功
// 关键词: StatusCode验证, HTTP状态码, 响应验证, 通信成功检查
assert rsp.StatusCode == 200

// 测试2: 使用http.Post直接发送POST请求
// 关键词: http.Post, 直接POST请求, 简化HTTP请求, 快速POST
rsp = http.Post(f"https://127.0.0.1:${port}", http.body("aaa=bbb"))~

// 再次验证响应状态码
// 关键词: 重复验证, 多次测试, 通信稳定性, HTTP响应验证
assert rsp.StatusCode == 200

