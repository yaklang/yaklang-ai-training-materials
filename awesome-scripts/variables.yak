// =============================================================================
// Yak变量类型演示脚本 - 展示Yak语言支持的各种数据类型和变量操作
// 功能: 演示字符串、数字、数组、映射、布尔值等各种变量类型的定义和使用
// 用途: 语法学习、类型系统理解、变量操作、数据类型测试、编程基础
//
// 核心技术栈:
// - 基础数据类型: string, int, float, bool
// - 整数类型: int8, uint8, uint16, uint32, uint64
// - 浮点类型: float64
// - 复合类型: 数组(array), 切片(slice), 映射(map)
// - 类型转换: 显式类型转换和类型声明
// - 字符串操作: 字符串切片和子串提取
//
// 演示内容:
// 1. 基础数据类型 - 字符串、整数、浮点数
// 2. 布尔类型 - true/false值
// 3. 数组和切片 - 固定长度和动态数组
// 4. 映射类型 - key-value键值对结构
// 5. 类型转换 - 不同数据类型间的转换
// 6. 复合数据结构 - 嵌套数组和复杂结构
//
// 关键词: 变量类型 数据类型 字符串 整数 浮点数 数组 映射 布尔值 类型转换
// 搜索标签: #variables #data-types #string #integer #float #array #map #boolean
// AI搜索词: Yak变量类型 数据类型演示 变量定义 类型系统 基础语法 变量操作
// =============================================================================

// ===== 变量类型演示函数 - 展示各种数据类型的定义和使用 =====
// 关键词: 变量演示, 数据类型, 类型定义, 变量操作, 类型系统

// 主要演示函数 - 包含所有变量类型的示例
// 关键词: foobar函数, 变量演示, 类型展示, 数据类型测试
foobar = func() {
    // ===== 基础数据类型演示 =====
    // 关键词: 基础类型, 字符串类型, 数值类型, 基本数据类型
    
    // 字符串变量 - 文本数据类型
    // 关键词: 字符串变量, string类型, 文本数据, 字符串字面量
    a1   = "foofoofoofoofoofoo"
    
    // 整数变量 - 基础数值类型
    // 关键词: 整数变量, int类型, 数值数据, 整数字面量
    a2   = 6
    
    // 浮点数变量 - 小数数值类型
    // 关键词: 浮点数变量, float类型, 小数数据, 浮点字面量
    a3   = 7.23
    
    // ===== 数组和切片类型演示 =====
    // 关键词: 数组类型, 切片类型, 集合数据, 序列数据
    
    // 整数数组 - 固定类型的数组
    // 关键词: 整数数组, []int类型, 数组字面量, 数组初始化
    a4   = []int{1, 2}
    
    // 更大的整数数组 - 多元素数组
    // 关键词: 多元素数组, 数组扩展, 序列数据, 数组集合
    a5   = []int{1, 2, 3, 4, 5}
    
    // ===== 函数调用获取的变量 =====
    // 关键词: 函数调用, 动态获取, 函数返回值, 变量赋值
    
    // 通过函数调用获取的变量 - 动态值获取
    // 关键词: get_a6函数, 函数调用赋值, 动态变量, 函数返回
    a6   = get_a6()
    a7   = get_a7()
    a8   = get_a8()
    a9   = get_a9()
    
    // ===== 字符串切片操作 =====
    // 关键词: 字符串切片, 子串提取, 字符串操作, 切片语法
    
    // 字符串切片 - 提取子字符串
    // 关键词: 字符串切片, [2:5]语法, 子串, 字符串截取
    a10  = a1[2:5]
    
    // 更多函数调用变量
    // 关键词: 函数调用变量, 动态赋值, 函数返回值
    a11  = get_a11()
    a12  = get_a12()
    a13  = get_a13()
    
    // ===== 布尔类型演示 =====
    // 关键词: 布尔类型, bool类型, 逻辑值, true/false
    
    // 布尔真值 - 逻辑真
    // 关键词: 布尔真值, true值, 逻辑真, 布尔字面量
    b1   = true 
    
    // 布尔假值 - 逻辑假
    // 关键词: 布尔假值, false值, 逻辑假, 布尔字面量
    b2   = false
    
    // ===== 特殊数值类型演示 =====
    // 关键词: 特殊数值, 负数, 类型转换, 数值类型
    
    // 负数 - 负整数值
    // 关键词: 负数, 负整数, -1值, 负数字面量
    neg  = -1
    
    // ===== 显式类型转换演示 =====
    // 关键词: 类型转换, 显式转换, 类型声明, 数值转换
    
    // 8位有符号整数 - 小范围整数
    // 关键词: int8类型, 8位整数, 有符号整数, 类型转换
    i8   = int8(1)
    
    // 8位无符号整数 - 字节类型
    // 关键词: uint8类型, 8位无符号, 字节类型, 无符号整数
    u8   = uint8(255)
    
    // 16位无符号整数 - 短整数
    // 关键词: uint16类型, 16位无符号, 短整数, 类型转换
    u16  = uint16(65535)
    
    // 32位无符号整数 - 标准无符号整数
    // 关键词: uint32类型, 32位无符号, 标准整数, 大数值
    u32  = uint32(4294967295)
    
    // 64位无符号整数 - 长整数
    // 关键词: uint64类型, 64位无符号, 长整数, 最大整数
    u64  = uint64(9223372036854775807)
    
    // 64位浮点数 - 双精度浮点
    // 关键词: float64类型, 双精度浮点, 64位浮点, 浮点转换
    f1   = float64(1.2)
    
    // ===== 复合数据结构演示 =====
    // 关键词: 复合结构, 集合类型, 容器类型, 数据容器
    
    // 动态数组 - 使用make创建
    // 关键词: make函数, 动态数组, []int切片, 数组创建
    ba   = make([]int, 200, 200)
    
    // 函数返回的映射 - 动态获取映射
    // 关键词: 映射变量, map类型, 函数返回映射, 动态映射
    ms   = get_ms()
    
    // 整数到变量的映射 - 键值对结构
    // 关键词: map[int]var, 整数键映射, 键值对, 映射字面量
    mp   = map[int]var{1: 42, 2: 43}
    
    // 嵌套数组结构 - 多维数组
    // 关键词: 嵌套数组, 多维数组, []var类型, 复杂结构
    ni   = []var([]var{[]var{123}})
    
    // ===== 变量输出演示 =====
    // 关键词: 变量输出, println函数, 批量输出, 变量显示
    
    // 输出所有变量 - 展示所有定义的变量值
    // 关键词: 批量输出, 变量展示, println输出, 变量验证
    println(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, b1, b2, neg, i8, u8, u16, u32, u64, f1, ba, ni, ms, mp)
}

// ===== 全局变量定义 =====
// 关键词: 全局变量, 全局作用域, 模块级变量, 全局定义

// 全局整数变量 - 在全局作用域定义
// 关键词: 全局变量p1, 全局整数, 模块变量, 全局作用域
p1 = 10

// ===== 函数执行 =====
// 关键词: 函数调用, 函数执行, 演示执行, 脚本运行

// 执行变量演示函数 - 运行所有变量类型演示
// 关键词: foobar调用, 函数执行, 演示运行, 变量测试
foobar()