// Level 2: HTTP POST 请求与表单处理
// 发送不同类型的 POST 请求并比较

println("=== HTTP POST Test ===\n")

testURL = "http://httpbin.org/post"
testData = {
    "username": "admin",
    "password": "test123"
}

// ========================================
// 1. Form-data POST 请求
// ========================================

println("[1] Form-data POST Request")
println(f"  URL: ${testURL}")
println("  Content-Type: application/x-www-form-urlencoded")

// 构造 form-data 格式
formData = sprintf("username=%s&password=%s", testData["username"], testData["password"])
println(f"  Data: ${formData}\n")

// 发送 Form POST
try {
    formResp, err = http.Post(testURL, "application/x-www-form-urlencoded", formData, http.timeout(10))~
    formStatus = poc.GetStatusCodeFromResponse(formResp)
    formBody = string(poc.GetHTTPPacketBody(formResp))
    
    println(f"  Response Status: ${formStatus}")
    if str.Contains(formBody, "username") && str.Contains(formBody, "admin") {
        println("  Response contains form data: ✓\n")
    } else {
        println("  Response data verification: ✗\n")
    }
} catch err {
    println(f"  Error: ${err}\n")
    formStatus = 0
    formBody = ""
}

// ========================================
// 2. JSON POST 请求
// ========================================

println("[2] JSON POST Request")
println(f"  URL: ${testURL}")
println("  Content-Type: application/json")

// 构造 JSON 格式
jsonData = json.dumps(testData)
println(f"  Data: ${jsonData}\n")

// 发送 JSON POST
try {
    jsonResp, err = http.Post(testURL, "application/json", jsonData, http.timeout(10))~
    jsonStatus = poc.GetStatusCodeFromResponse(jsonResp)
    jsonBody = string(poc.GetHTTPPacketBody(jsonResp))
    
    println(f"  Response Status: ${jsonStatus}")
    if str.Contains(jsonBody, "username") && str.Contains(jsonBody, "admin") {
        println("  Response contains JSON data: ✓\n")
    } else {
        println("  Response data verification: ✗\n")
    }
} catch err {
    println(f"  Error: ${err}\n")
    jsonStatus = 0
    jsonBody = ""
}

// ========================================
// 3. 结果比较
// ========================================

println("=== Comparison ===")
if formStatus == 200 && jsonStatus == 200 {
    println("Both requests successful")
    println(f"Form response length: ${len(formBody)} bytes")
    println(f"JSON response length: ${len(jsonBody)} bytes")
} else {
    println("One or more requests failed")
    println(f"Form status: ${formStatus}")
    println(f"JSON status: ${jsonStatus}")
}

// ========================================
// 验证测试
// ========================================

// 基本验证（如果网络可用）
if formStatus > 0 {
    assert formStatus == 200, "Form POST should return 200"
}

if jsonStatus > 0 {
    assert jsonStatus == 200, "JSON POST should return 200"
}

println("\n✓ All tests completed!")

/*
验证方法：
  yak PRACTICE_level2_http_post.yak

注意：此脚本需要网络连接到 httpbin.org

预期输出（网络正常时）：
  === HTTP POST Test ===
  
  [1] Form-data POST Request
    URL: http://httpbin.org/post
    Content-Type: application/x-www-form-urlencoded
    Data: username=admin&password=test123
    
    Response Status: 200
    Response contains form data: ✓
  
  [2] JSON POST Request
    URL: http://httpbin.org/post
    Content-Type: application/json
    Data: {"password":"test123","username":"admin"}
    
    Response Status: 200
    Response contains JSON data: ✓
  
  === Comparison ===
  Both requests successful
  Form response length: 523 bytes
  JSON response length: 531 bytes
  
  ✓ All tests completed!

测试要点：
1. 能正确构造 form-data 格式数据
2. 能正确构造 JSON 格式数据
3. 能设置正确的 Content-Type
4. 能发送 POST 请求
5. 能解析响应内容
6. 能处理网络错误

替代测试（无网络时）：
可以修改 testURL 为本地测试服务器，
或使用 yakit 的内置测试服务
*/

