// Medium: 正则表达式敏感信息提取
// 从日志文本中提取邮箱、IP、手机号、URL等敏感信息

// 测试日志文本
logText = `User admin@example.com logged in from 192.168.1.100
Contact: support@test.org, Phone: 13812345678
Server: 10.0.0.1:8080, API: https://api.example.com/v1/users
Emergency contact: 138-1234-5678
Another server at http://backup.test.com:9090 (IP: 172.16.0.50)
Customer service: service@company.cn, Tel: 13900001234`

// 1. 提取邮箱地址 - 使用内置函数
emails = re.ExtractEmail(logText)
println(f"=== Email Addresses (${len(emails)} found) ===")
for i, email in emails {
    println(f"${i+1}. ${email}")
}

// 2. 提取 IP 地址 - 使用内置函数
ips = re.ExtractIP(logText)
println(f"\n=== IP Addresses (${len(ips)} found) ===")
for i, ip in ips {
    println(f"${i+1}. ${ip}")
}

// 3. 提取手机号码 - 使用自定义正则
// 匹配格式：13812345678 或 138-1234-5678
phonePattern = "1[3-9]\\d{1}-?\\d{4}-?\\d{4}"
phones = re.FindAll(logText, phonePattern)
println(f"\n=== Phone Numbers (${len(phones)} found) ===")
for i, phone in phones {
    println(f"${i+1}. ${phone}")
}

// 4. 提取 URL 地址 - 使用自定义正则
// 匹配 http:// 或 https:// 开头的 URL
urlPattern = "https?://[a-zA-Z0-9.-]+(?::\\d+)?(?:/[^\\s]*)?"
urls = re.FindAll(logText, urlPattern)
println(f"\n=== URLs (${len(urls)} found) ===")
for i, url in urls {
    println(f"${i+1}. ${url}")
}

// 5. 输出统计摘要
println("\n=== Summary ===")
println(f"Total emails: ${len(emails)}")
println(f"Total IPs: ${len(ips)}")
println(f"Total phones: ${len(phones)}")
println(f"Total URLs: ${len(urls)}")

// ========================================
// 验证测试
// ========================================

// 辅助函数：检查列表是否包含某个元素
contains = func(list, item) {
    for element in list {
        if element == item {
            return true
        }
    }
    return false
}

// 验证邮箱提取
assert len(emails) >= 3, "Should extract at least 3 email addresses"
assert contains(emails, "admin@example.com"), "Should find admin@example.com"
assert contains(emails, "support@test.org"), "Should find support@test.org"
assert contains(emails, "service@company.cn"), "Should find service@company.cn"

// 验证 IP 提取
assert len(ips) >= 3, "Should extract at least 3 IP addresses"
assert contains(ips, "192.168.1.100"), "Should find 192.168.1.100"
assert contains(ips, "10.0.0.1"), "Should find 10.0.0.1"
assert contains(ips, "172.16.0.50"), "Should find 172.16.0.50"

// 验证手机号提取
assert len(phones) >= 3, "Should extract at least 3 phone numbers"
assert contains(phones, "13812345678"), "Should find 13812345678"
assert contains(phones, "138-1234-5678"), "Should find 138-1234-5678"
assert contains(phones, "13900001234"), "Should find 13900001234"

// 验证 URL 提取
assert len(urls) >= 2, "Should extract at least 2 URLs"
hasAPIUrl = false
hasBackupUrl = false
for url in urls {
    if str.Contains(url, "api.example.com") {
        hasAPIUrl = true
    }
    if str.Contains(url, "backup.test.com") {
        hasBackupUrl = true
    }
}
assert hasAPIUrl, "Should find API URL"
assert hasBackupUrl, "Should find backup URL"

println("\n✓ All tests passed!")

/*
验证方法：
在命令行执行：
  yak PRACTICE_medium_regex_extract.yak

预期输出：
  === Email Addresses (3 found) ===
  1. admin@example.com
  2. support@test.org
  3. service@company.cn
  
  === IP Addresses (3 found) ===
  1. 192.168.1.100
  2. 10.0.0.1
  3. 172.16.0.50
  
  === Phone Numbers (3 found) ===
  1. 13812345678
  2. 138-1234-5678
  3. 13900001234
  
  === URLs (2 found) ===
  1. https://api.example.com/v1/users
  2. http://backup.test.com:9090
  
  === Summary ===
  Total emails: 3
  Total IPs: 3
  Total phones: 3
  Total URLs: 2
  
  ✓ All tests passed!

测试要点：
1. 能正确提取所有邮箱地址
2. 能正确提取所有 IP 地址
3. 能识别不同格式的手机号（带横线和不带横线）
4. 能正确提取完整的 URL（包括路径和端口）
5. 统计数量准确
*/

