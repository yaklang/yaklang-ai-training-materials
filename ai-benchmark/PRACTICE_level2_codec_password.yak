// Level 2: 密码哈希与验证
// 实现密码存储和验证系统

println("=== Password Hashing System ===\n")

// 配置
passwordSalt = "yaklang-security-salt-2024"  // 密码盐值

// 用户数据
users = [
    {"username": "admin", "password": "Admin@123"},
    {"username": "user1", "password": "Pass123!"},
    {"username": "user2", "password": "Secret456"}
]

// 登录测试数据
loginAttempts = [
    {"username": "admin", "password": "Admin@123"},  // 正确
    {"username": "admin", "password": "wrongpass"},  // 错误
    {"username": "user1", "password": "Pass123!"},   // 正确
    {"username": "user2", "password": "wrong"},      // 错误
]

// ========================================
// 用户注册 - 计算并存储密码哈希
// ========================================

println("[Registration] Registering", len(users), "users...")
userDB = {}  // 存储用户名 -> 密码哈希的映射

for user in users {
    username = user["username"]
    password = user["password"]
    
    // 计算密码哈希 - HMAC-SHA256
    hashBytes = codec.HmacSha256(passwordSalt, password)
    passwordHash = codec.EncodeToHex(hashBytes)
    
    // 存储到用户数据库
    userDB[username] = passwordHash
    
    // 显示前16个字符的哈希
    shortHash = passwordHash[:16] + "..."
    println(f"✓ User '${username}' registered")
    println(f"  Password hash: ${shortHash}")
}

println("")

// ========================================
// 密码验证测试
// ========================================

println("[Login Tests] Testing", len(loginAttempts), "login attempts...")

successCount = 0
failCount = 0

attemptIndex = 1
for attempt in loginAttempts {
    username = attempt["username"]
    password = attempt["password"]
    
    println(f"[${attemptIndex}/${len(loginAttempts)}] ${username} / ${password}")
    
    // 检查用户是否存在
    if userDB[username] == undefined {
        println("  ✗ Login failed: User not found")
        failCount++
        continue
    }
    
    // 计算输入密码的哈希
    inputHashBytes = codec.HmacSha256(passwordSalt, password)
    inputHash = codec.EncodeToHex(inputHashBytes)
    
    // 比较哈希值
    if inputHash == userDB[username] {
        println("  ✓ Login successful")
        successCount++
    } else {
        println("  ✗ Login failed: Invalid password")
        failCount++
    }
    
    attemptIndex++
}

println("")

// ========================================
// 统计结果
// ========================================

println("=== Statistics ===")
totalAttempts = len(loginAttempts)
successRate = float(successCount) / float(totalAttempts) * 100

println(f"Total attempts: ${totalAttempts}")
println(f"Successful: ${successCount}")
println(f"Failed: ${failCount}")
println(f"Success rate: ${sprintf('%.2f', successRate)}%")

// ========================================
// 验证测试
// ========================================

// 验证用户注册
assert len(userDB) == 3, "Should have 3 users registered"
assert userDB["admin"] != undefined, "Admin user should exist"
assert userDB["user1"] != undefined, "User1 should exist"
assert userDB["user2"] != undefined, "User2 should exist"

// 验证哈希长度（SHA256 hex = 64 characters）
for username, hash in userDB {
    assert len(hash) == 64, f"Hash length should be 64 for ${username}"
}

// 验证登录统计
assert successCount == 2, "Should have 2 successful logins"
assert failCount == 2, "Should have 2 failed logins"
assert totalAttempts == 4, "Should have 4 total attempts"

println("\n✓ All tests passed!")

/*
验证方法：
  yak PRACTICE_level2_codec_password.yak

预期输出：
  === Password Hashing System ===
  
  [Registration] Registering 3 users...
  ✓ User 'admin' registered
    Password hash: 8f5e21c3a2b1d4e7...
  ✓ User 'user1' registered
    Password hash: 6a3d42e5f8c9b1a3...
  ✓ User 'user2' registered
    Password hash: 4b7a91f2d6e83c5a...
  
  [Login Tests] Testing 4 login attempts...
  [1/4] admin / Admin@123
    ✓ Login successful
  [2/4] admin / wrongpass
    ✗ Login failed: Invalid password
  [3/4] user1 / Pass123!
    ✓ Login successful
  [4/4] user2 / wrong
    ✗ Login failed: Invalid password
  
  === Statistics ===
  Total attempts: 4
  Successful: 2
  Failed: 2
  Success rate: 50.00%
  
  ✓ All tests passed!

关键技术：
1. HMAC-SHA256 哈希算法
2. 密码加盐（salt）
3. 安全密码存储
4. 密码验证逻辑
5. 统计分析

实际应用：
- 用户认证系统
- 密码安全存储
- API 密钥验证
- Token 生成与验证
*/

