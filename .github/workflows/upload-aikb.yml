name: Upload AIKB to OSS

on:
  # 当指定文件夹有改动时触发
  push:
    branches:
      - main
    paths:
      - 'awesome-scripts/**'
      - 'basic-syntax/**'
      - 'library-usage/**'
      - 'practice/**'
      - 'scripts/merge-in-one-text.yak'
      - '.github/workflows/upload-aikb.yml'
  
  # 允许手动触发
  workflow_dispatch:

# 确保同一时间只运行一个上传任务
concurrency:
  group: upload-aikb
  cancel-in-progress: false

env:
  TARGET_DIRS: "practice"

jobs:
  build-and-upload:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Print trigger information
        run: |
          echo "============================================"
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "============================================"
      
      - name: Download Yaklang Engine (v1.4.4-alpha1029)
        run: |
          echo "=== Downloading Yaklang Engine v1.4.4-alpha1029 ==="
          YAK_VERSION="1.4.4-alpha1029"
          YAK_URL="https://yaklang.oss-accelerate.aliyuncs.com/yak/${YAK_VERSION}/yak_linux_amd64"
          
          echo "Downloading from: $YAK_URL"
          wget -q --show-progress -O ./yak "$YAK_URL"
          
          if [ ! -f ./yak ]; then
            echo "ERROR: Failed to download yak engine"
            echo "Trying alternative URL..."
            YAK_URL="https://yaklang.oss-accelerate.aliyuncs.com/yak/${YAK_VERSION}/yak_linux_amd64"
            wget -q --show-progress -O ./yak "$YAK_URL" || exit 1
          fi
          
          chmod +x ./yak
          
          # 验证下载的文件
          echo ""
          echo "=== Downloaded file info ==="
          ls -lh ./yak
          file ./yak
          
          # 测试执行
          echo ""
          echo "=== Testing yak engine ==="
          ./yak version || echo "Note: yak version command may not be available in this version"
          
          echo ""
          echo "✓ Yaklang engine downloaded and verified successfully"
      
      - name: Generate AIKB ZIP file
        run: |
          echo "=== Generating AIKB ZIP file ==="

          # 下载现有的 yaklang-aikb.zip 并保存为 yaklang-aikb-old.zip
          echo "Downloading existing yaklang-aikb.zip..."
          OLD_ZIP_URL="https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.zip"
          if curl -s -o yaklang-aikb-old.zip "$OLD_ZIP_URL"; then
            echo "✓ Existing ZIP downloaded successfully"
            ls -lh yaklang-aikb-old.zip
          else
            echo "⚠️  Failed to download existing ZIP (may not exist yet)"
          fi

          # 运行 merge-in-one-text.yak 生成 ZIP
          echo "Running merge-in-one-text.yak..."
          ./yak scripts/merge-in-one-text.yak --output yaklang-aikb.zip
          
          if [ ! -f yaklang-aikb.zip ]; then
            echo "ERROR: Failed to generate yaklang-aikb.zip"
            echo "DEBUG: Checking current directory contents:"
            ls -lh
            exit 1
          fi
          
          # 验证生成的文件
          echo ""
          echo "=== Generated ZIP file info ==="
          ls -lh yaklang-aikb.zip
          
          # 尝试列出 ZIP 内容以验证其有效性
          echo ""
          echo "=== ZIP file contents (first 20 entries) ==="
          unzip -l yaklang-aikb.zip | head -25 || {
            echo "ERROR: Generated ZIP file appears to be invalid"
            exit 1
          }
          
          # 统计文件数和大小
          FILE_COUNT=$(unzip -l yaklang-aikb.zip | tail -1 | awk '{print $2}')
          FILE_SIZE=$(stat -c%s yaklang-aikb.zip 2>/dev/null || stat -f%z yaklang-aikb.zip)
          
          echo ""
          echo "=== ZIP Statistics ==="
          echo "Files in ZIP: $FILE_COUNT"
          echo "ZIP size: $FILE_SIZE bytes ($(echo "scale=2; $FILE_SIZE/1024/1024" | bc) MB)"
          
          echo ""
          echo "✓ AIKB ZIP file generated successfully"

      - name: Generate diff report and package
        if: always()
        run: |
          echo "=== Generating ZIP diff report and package ==="
          
          if [ -f yaklang-aikb-old.zip ] && [ -f yaklang-aikb.zip ]; then
            # 使用 diff-zip-v2.yak 进行对比和生成差异包
            echo "Running diff-zip-v2.yak to compare ZIP files and create diff package..."
            ./yak scripts/diff-zip-v2.yak --old yaklang-aikb-old.zip --new yaklang-aikb.zip --output diff-fs.zip
            
            if [ -f diff-fs.zip ] && [ -f diff-fs.md ]; then
              echo "✓ Diff package and report generated successfully"
              echo ""
              echo "=== Diff package info ==="
              ls -lh diff-fs.zip
              echo ""
              echo "=== Diff package contents ==="
              unzip -l diff-fs.zip | head -20
              echo ""
              echo "=== Report content ==="
              cat diff-fs.md
            else
              echo "⚠️  Failed to generate diff package or report"
            fi
          else
            echo "⚠️  Cannot generate diff report - missing old or new ZIP file"
            echo "# AIKB ZIP 差异报告" > diff-fs.md
            echo "" >> diff-fs.md
            echo "**状态**: 无法生成差异报告 - 缺少比较文件" >> diff-fs.md
            echo "**时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> diff-fs.md
            
            # 创建空的差异包
            echo "Creating empty diff package..."
            ./yak -c 'emptyZip = zip.CompressRaw({}); file.Save("diff-fs.zip", emptyZip)'
          fi

      - name: Update RAG with diff package
        if: success()
        env:
          EMBEDDING_HOST: ${{ secrets.EMBEDDING_HOST }}
          EMBEDDING_PORT: ${{ secrets.EMBEDDING_PORT }}
          TOTP_SECRET: ${{ secrets.TOTP_SECRET }}
        run: |
          echo "=== Updating RAG knowledge base ==="
          
          # 检查是否有差异包
          if [ ! -f diff-fs.zip ]; then
            echo "⚠️  No diff package found, skipping RAG update"
            exit 0
          fi
          
          echo "=== Checking required environment variables ==="
          
          if [ -z "$EMBEDDING_HOST" ]; then
            echo "ERROR: EMBEDDING_HOST environment variable is not set"
            echo "Please ensure EMBEDDING_HOST secret is configured in repository settings"
            exit 1
          fi
          
          if [ -z "$EMBEDDING_PORT" ]; then
            echo "ERROR: EMBEDDING_PORT environment variable is not set"
            echo "Please ensure EMBEDDING_PORT secret is configured in repository settings"
            exit 1
          fi
          
          if [ -z "$TOTP_SECRET" ]; then
            echo "ERROR: TOTP_SECRET environment variable is not set"
            echo "Please ensure TOTP_SECRET secret is configured in repository settings"
            exit 1
          fi
          
          if [ -z "$TARGET_DIRS" ]; then
            echo "ERROR: TARGET_DIRS environment variable is not set"
            exit 1
          fi
          
          echo "✓ All required environment variables are set"
          echo "EMBEDDING_HOST: $EMBEDDING_HOST"
          echo "EMBEDDING_PORT: $EMBEDDING_PORT"
          echo "TOTP_SECRET: [REDACTED]"
          echo "TARGET_DIRS: $TARGET_DIRS"
          
          # 创建 RAG 文件目录
          mkdir -p rag-files
          echo "✓ Created rag-files directory"
          
          # 下载每个目录的旧 RAG 文件（如果存在）
          echo ""
          echo "=== Downloading existing RAG files ==="
          IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
          for dir in "${DIRS[@]}"; do
            # 去除可能的空格
            dir=$(echo "$dir" | xargs)
            
            # 从 OSS 下载 {dir}.rag 文件
            RAG_URL="https://oss-qn.yaklang.com/ai-knowledge-base/rag/${dir}.rag"
            DOWNLOADED_FILE="rag-files/${dir}.rag"
            OLD_RAG_FILE="rag-files/${dir}_old.rag"
            
            echo "Trying to download: $RAG_URL"
            if curl -f -s -o "$DOWNLOADED_FILE" "$RAG_URL"; then
              # 下载成功后重命名为 _old.rag
              mv "$DOWNLOADED_FILE" "$OLD_RAG_FILE"
              echo "✓ Downloaded and renamed RAG file for $dir"
              ls -lh "$OLD_RAG_FILE"
            else
              echo "⚠️  No existing RAG file for $dir, will create new one"
            fi
          done
          
          # 运行 update-rag.yak（使用环境变量 TARGET_DIRS）
          echo ""
          echo "=== Running update-rag.yak ==="
          ./yak scripts/update-rag.yak \
            --rag-file-dir rag-files \
            --diff-zip diff-fs.zip \
            --embedding-host "$EMBEDDING_HOST" \
            --embedding-port "$EMBEDDING_PORT" \
            --totp-secret "$TOTP_SECRET" \
            --timeout 60
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to update RAG"
            exit 1
          fi
          
          # 验证生成的文件
          echo ""
          echo "=== Verifying generated RAG files ==="
          RAG_FILES_GENERATED=0
          for dir in "${DIRS[@]}"; do
            dir=$(echo "$dir" | xargs)
            NEW_RAG_FILE="rag-files/${dir}_new.rag"
            
            if [ -f "$NEW_RAG_FILE" ]; then
              echo "✓ RAG file generated for $dir"
              ls -lh "$NEW_RAG_FILE"
              RAG_FILES_GENERATED=$((RAG_FILES_GENERATED + 1))
            else
              echo "⚠️  RAG file not generated for $dir"
            fi
          done
          
          # 显示汇总报告
          if [ -f rag-files/update-summary.md ]; then
            echo ""
            echo "=== Update Summary Report ==="
            cat rag-files/update-summary.md
          fi
          
          # 显示各目录的详细报告
          for dir in "${DIRS[@]}"; do
            dir=$(echo "$dir" | xargs)
            REPORT_FILE="rag-files/${dir}_update-report.md"
            if [ -f "$REPORT_FILE" ]; then
              echo ""
              echo "=== Update Report for $dir ==="
              cat "$REPORT_FILE"
            fi
          done
          
          if [ $RAG_FILES_GENERATED -eq 0 ]; then
            echo ""
            echo "ERROR: No RAG files were generated"
            exit 1
          fi
          
          echo ""
          echo "✓ RAG update completed successfully"
          echo "  Generated $RAG_FILES_GENERATED RAG file(s)"

      - name: Create upload timestamp file
        run: |
          echo "=== Creating timestamp file ==="
          
          # 生成时间戳文件
          UPLOAD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"
          
          # 直接写入文件内容
          echo "Upload Time: $UPLOAD_TIME" > yaklang-aikb.updated_at.txt
          echo "Commit: $COMMIT_SHORT ($COMMIT_SHA)" >> yaklang-aikb.updated_at.txt
          echo "Branch: ${{ github.ref_name }}" >> yaklang-aikb.updated_at.txt
          echo "Actor: ${{ github.actor }}" >> yaklang-aikb.updated_at.txt
          echo "Workflow Run: ${{ github.run_number }}" >> yaklang-aikb.updated_at.txt
          
          echo ""
          echo "=== Timestamp file content ==="
          cat yaklang-aikb.updated_at.txt
          
          echo ""
          echo "✓ Timestamp file created successfully"
      
      - name: Upload files to OSS
        env:
          OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
          OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
        run: |
          echo "=== Uploading files to OSS ==="
          
          if [ -z "$OSS_KEY_ID" ] || [ -z "$OSS_KEY_SECRET" ]; then
            echo "ERROR: OSS credentials not found"
            echo "Please ensure OSS_KEY_ID and OSS_KEY_SECRET secrets are set"
            exit 1
          fi
          
          BUCKET="yaklang"
          ENDPOINT="oss-accelerate.aliyuncs.com"
          
          # 上传 ZIP 文件
          echo ""
          echo "Uploading yaklang-aikb.zip..."
          ./yak upload-oss \
            -b "$BUCKET" \
            --endpoint "$ENDPOINT" \
            -ak "$OSS_KEY_ID" \
            -sk "$OSS_KEY_SECRET" \
            -t 10 \
            -f "yaklang-aikb.zip:/ai-knowledge-base/yaklang-aikb.zip"
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to upload yaklang-aikb.zip"
            exit 1
          fi
          
          echo "✓ yaklang-aikb.zip uploaded successfully"
          
          # 上传时间戳文件
          echo ""
          echo "Uploading yaklang-aikb.updated_at.txt..."
          ./yak upload-oss \
            -b "$BUCKET" \
            --endpoint "$ENDPOINT" \
            -ak "$OSS_KEY_ID" \
            -sk "$OSS_KEY_SECRET" \
            -t 5 \
            -f "yaklang-aikb.updated_at.txt:/ai-knowledge-base/yaklang-aikb.updated_at.txt"
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to upload yaklang-aikb.updated_at.txt"
            exit 1
          fi
          
          echo "✓ yaklang-aikb.updated_at.txt uploaded successfully"
          
          # 上传 RAG 文件（每个目录的 RAG 文件）
          echo ""
          echo "=== Uploading RAG files ==="
          
          if [ -z "$TARGET_DIRS" ]; then
            echo "⚠️  TARGET_DIRS not set, skipping RAG upload"
          else
            IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
            RAG_UPLOADED=0
            
            for dir in "${DIRS[@]}"; do
              dir=$(echo "$dir" | xargs)
              NEW_RAG_FILE="rag-files/${dir}_new.rag"
              UPLOAD_RAG_FILE="rag-files/${dir}.rag"
              
              if [ -f "$NEW_RAG_FILE" ]; then
                # 将 _new.rag 重命名为 .rag 用于上传
                cp "$NEW_RAG_FILE" "$UPLOAD_RAG_FILE"
                
                echo ""
                echo "Uploading RAG file for $dir..."
                echo "  Source: $NEW_RAG_FILE"
                echo "  Target: /ai-knowledge-base/rag/${dir}.rag"
                
                ./yak upload-oss \
                  -b "$BUCKET" \
                  --endpoint "$ENDPOINT" \
                  -ak "$OSS_KEY_ID" \
                  -sk "$OSS_KEY_SECRET" \
                  -t 10 \
                  -f "$UPLOAD_RAG_FILE:/ai-knowledge-base/rag/${dir}.rag"
                
                if [ $? -ne 0 ]; then
                  echo "ERROR: Failed to upload RAG file for $dir"
                  exit 1
                fi
                
                echo "✓ RAG file for $dir uploaded successfully"
                RAG_UPLOADED=$((RAG_UPLOADED + 1))
              else
                echo "⚠️  RAG file not found for $dir, skipping"
              fi
            done
            
            echo ""
            echo "✓ Uploaded $RAG_UPLOADED RAG file(s)"
          fi
          
          # 上传汇总报告（如果存在）
          if [ -f rag-files/update-summary.md ]; then
            echo ""
            echo "Uploading RAG update summary report..."
            ./yak upload-oss \
              -b "$BUCKET" \
              --endpoint "$ENDPOINT" \
              -ak "$OSS_KEY_ID" \
              -sk "$OSS_KEY_SECRET" \
              -t 5 \
              -f "rag-files/update-summary.md:/ai-knowledge-base/rag/update-summary.md"
            
            if [ $? -eq 0 ]; then
              echo "✓ Update summary report uploaded successfully"
            fi
          fi
          
          echo ""
          echo "✓ All files uploaded to OSS successfully"
      
      - name: Verify OSS upload with HEAD requests
        run: |
          echo "=== Verifying OSS uploads ==="
          
          OSS_DOMAIN="oss-qn.yaklang.com"
          BASE_URL="https://${OSS_DOMAIN}/ai-knowledge-base"
          
          # 验证 ZIP 文件
          echo ""
          echo "Verifying yaklang-aikb.zip..."
          ZIP_URL="${BASE_URL}/yaklang-aikb.zip"
          
          HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" "$ZIP_URL")
          CONTENT_LENGTH=$(curl -I -s "$ZIP_URL" | grep -i content-length | awk '{print $2}' | tr -d '\r')
          LAST_MODIFIED=$(curl -I -s "$ZIP_URL" | grep -i last-modified | cut -d' ' -f2- | tr -d '\r')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Content-Length: $CONTENT_LENGTH bytes"
          echo "Last-Modified: $LAST_MODIFIED"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "ERROR: yaklang-aikb.zip verification failed (HTTP $HTTP_CODE)"
            echo "URL: $ZIP_URL"
            exit 1
          fi
          
          if [ -z "$CONTENT_LENGTH" ] || [ "$CONTENT_LENGTH" -lt 1000 ]; then
            echo "ERROR: yaklang-aikb.zip size is suspiciously small ($CONTENT_LENGTH bytes)"
            exit 1
          fi
          
          echo "✓ yaklang-aikb.zip verified successfully"
          
          # 验证时间戳文件
          echo ""
          echo "Verifying yaklang-aikb.updated_at.txt..."
          TIMESTAMP_URL="${BASE_URL}/yaklang-aikb.updated_at.txt"
          
          HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" "$TIMESTAMP_URL")
          TIMESTAMP_CONTENT=$(curl -s "$TIMESTAMP_URL")
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Content:"
          echo "$TIMESTAMP_CONTENT"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "ERROR: yaklang-aikb.updated_at.txt verification failed (HTTP $HTTP_CODE)"
            echo "URL: $TIMESTAMP_URL"
            exit 1
          fi
          
          if [ -z "$TIMESTAMP_CONTENT" ]; then
            echo "ERROR: yaklang-aikb.updated_at.txt is empty"
            exit 1
          fi
          
          echo "✓ yaklang-aikb.updated_at.txt verified successfully"
          
          # 验证 RAG 文件（仅验证实际生成和上传的文件）
          if [ -n "$TARGET_DIRS" ]; then
            echo ""
            echo "=== Verifying RAG files ==="
            IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
            RAG_VERIFIED=0
            RAG_TO_VERIFY=0
            
            for dir in "${DIRS[@]}"; do
              dir=$(echo "$dir" | xargs)
              
              # 只验证实际生成的 RAG 文件
              if [ ! -f "rag-files/${dir}_new.rag" ]; then
                echo "⚠️  Skipping verification for $dir (RAG file was not generated)"
                continue
              fi
              
              RAG_TO_VERIFY=$((RAG_TO_VERIFY + 1))
              RAG_URL="${BASE_URL}/rag/${dir}.rag"
              
              echo ""
              echo "Verifying RAG file for $dir..."
              echo "URL: $RAG_URL"
              HTTP_CODE=$(curl -I -s -o /dev/null -w "%{http_code}" "$RAG_URL")
              
              if [ "$HTTP_CODE" = "200" ]; then
                CONTENT_LENGTH=$(curl -I -s "$RAG_URL" | grep -i content-length | awk '{print $2}' | tr -d '\r')
                echo "HTTP Status: $HTTP_CODE"
                echo "Content-Length: $CONTENT_LENGTH bytes"
                echo "✓ RAG file for $dir verified successfully"
                RAG_VERIFIED=$((RAG_VERIFIED + 1))
              else
                echo "❌ RAG file for $dir verification failed (HTTP $HTTP_CODE)"
              fi
            done
            
            echo ""
            if [ $RAG_TO_VERIFY -eq 0 ]; then
              echo "ℹ️  No RAG files to verify (none were generated)"
            else
              echo "✓ Verified $RAG_VERIFIED out of $RAG_TO_VERIFY RAG file(s)"
            fi
          fi
          
          echo ""
          echo "============================================"
          echo "✓ All verifications passed!"
          echo "============================================"
          echo ""
          echo "AIKB files are now available at:"
          echo "  ZIP: $ZIP_URL"
          echo "  Timestamp: $TIMESTAMP_URL"
          
          if [ -n "$TARGET_DIRS" ]; then
            echo ""
            echo "RAG files (successfully uploaded):"
            IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
            for dir in "${DIRS[@]}"; do
              dir=$(echo "$dir" | xargs)
              # 只显示实际生成和上传的 RAG 文件
              if [ -f "rag-files/${dir}_new.rag" ]; then
                echo "  - $dir: ${BASE_URL}/rag/${dir}.rag"
              fi
            done
          fi
          
          echo ""
      
      - name: Upload diff package artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diff-fs
          path: diff-fs.zip
          retention-days: 7
      
      - name: Summary
        if: success()
        run: |
          echo "## ✅ AIKB Upload Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The AI Knowledge Base has been successfully built and uploaded to OSS." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Files" >> $GITHUB_STEP_SUMMARY
          echo "- \`yaklang-aikb.zip\` - Knowledge base archive" >> $GITHUB_STEP_SUMMARY
          echo "- \`yaklang-aikb.updated_at.txt\` - Upload timestamp" >> $GITHUB_STEP_SUMMARY
          echo "- \`diff-fs.zip\` - Diff package (available in artifacts)" >> $GITHUB_STEP_SUMMARY
          
          # 列出所有 RAG 文件（仅列出实际生成的）
          if [ -n "$TARGET_DIRS" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
            RAG_COUNT=0
            for dir in "${DIRS[@]}"; do
              dir=$(echo "$dir" | xargs)
              if [ -f "rag-files/${dir}_new.rag" ]; then
                RAG_COUNT=$((RAG_COUNT + 1))
              fi
            done
            
            if [ $RAG_COUNT -gt 0 ]; then
              echo "**RAG Files Generated ($RAG_COUNT):**" >> $GITHUB_STEP_SUMMARY
              for dir in "${DIRS[@]}"; do
                dir=$(echo "$dir" | xargs)
                if [ -f "rag-files/${dir}_new.rag" ]; then
                  echo "- \`${dir}.rag\` - RAG knowledge base for $dir" >> $GITHUB_STEP_SUMMARY
                fi
              done
            else
              echo "**RAG Files:** None generated" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- ZIP: https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.zip" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: https://oss-qn.yaklang.com/ai-knowledge-base/yaklang-aikb.updated_at.txt" >> $GITHUB_STEP_SUMMARY
          
          # 列出所有 RAG 文件的 URL（仅列出实际生成的）
          if [ -n "$TARGET_DIRS" ]; then
            IFS=',' read -ra DIRS <<< "$TARGET_DIRS"
            RAG_COUNT=0
            for dir in "${DIRS[@]}"; do
              dir=$(echo "$dir" | xargs)
              if [ -f "rag-files/${dir}_new.rag" ]; then
                RAG_COUNT=$((RAG_COUNT + 1))
              fi
            done
            
            if [ $RAG_COUNT -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**RAG Files:**" >> $GITHUB_STEP_SUMMARY
              for dir in "${DIRS[@]}"; do
                dir=$(echo "$dir" | xargs)
                if [ -f "rag-files/${dir}_new.rag" ]; then
                  echo "- $dir: https://oss-qn.yaklang.com/ai-knowledge-base/rag/${dir}.rag" >> $GITHUB_STEP_SUMMARY
                fi
              done
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 添加差异报告内容
          if [ -f diff-fs.md ]; then
            echo "### 📋 Diff Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat diff-fs.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 添加 RAG 更新汇总报告
          if [ -f rag-files/update-summary.md ]; then
            echo "### 🧠 RAG Update Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat rag-files/update-summary.md >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 📊 Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Actor: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Target Directories: \`$TARGET_DIRS\`" >> $GITHUB_STEP_SUMMARY

